
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\005\004\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\003\011\000\002\004\005\000\002\004\003\000\002" +
    "\010\014\000\002\010\016\000\002\010\017\000\002\010" +
    "\017\000\002\010\017\000\002\010\017\000\002\010\017" +
    "\000\002\010\021\000\002\010\021\000\002\010\021\000" +
    "\002\010\021\000\002\010\021\000\002\010\021\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\020\003\000\002\020\011\000\002\021\003" +
    "\000\002\021\011\000\002\022\003\000\002\022\011\000" +
    "\002\023\003\000\002\023\011\000\002\024\003\000\002" +
    "\024\011\000\002\025\003\000\002\025\011\000\002\011" +
    "\016\000\002\011\020\000\002\012\005\000\002\012\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\010\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\006\000\002\006\010\000\002\006\006\000\002\006\010" +
    "\000\002\006\006\000\002\006\010\000\002\006\006\000" +
    "\002\006\010\000\002\006\006\000\002\006\010\000\002" +
    "\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\004\006\005\001\002\000\004\002\u0153\001" +
    "\002\000\014\003\014\007\007\010\015\034\011\035\006" +
    "\001\002\000\004\014\u013c\001\002\000\004\002\uffff\001" +
    "\002\000\014\003\ufffd\007\ufffd\010\ufffd\034\ufffd\035\ufffd" +
    "\001\002\000\004\014\160\001\002\000\014\003\ufffa\007" +
    "\ufffa\010\ufffa\034\ufffa\035\ufffa\001\002\000\014\003\ufffc" +
    "\007\ufffc\010\ufffc\034\ufffc\035\ufffc\001\002\000\004\017" +
    "\157\001\002\000\004\015\022\001\002\000\014\003\ufffb" +
    "\007\ufffb\010\ufffb\034\ufffb\035\ufffb\001\002\000\014\003" +
    "\014\007\020\010\015\034\011\035\006\001\002\000\004" +
    "\002\000\001\002\000\014\003\ufffe\007\ufffe\010\ufffe\034" +
    "\ufffe\035\ufffe\001\002\000\004\011\023\001\002\000\004" +
    "\020\024\001\002\000\036\004\033\005\027\013\040\036" +
    "\026\037\030\040\042\041\041\042\031\043\043\044\025" +
    "\045\036\046\035\047\032\050\044\001\002\000\004\023" +
    "\150\001\002\000\004\023\143\001\002\000\040\012\uffba" +
    "\016\uffba\024\uffba\031\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\001\002\000\004\023\136\001\002\000\004\023" +
    "\131\001\002\000\004\023\122\001\002\000\040\012\uffb9" +
    "\016\uffb9\024\uffb9\031\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\001\002\000\006\012\117\016\116\001\002\000" +
    "\004\023\107\001\002\000\004\023\100\001\002\000\006" +
    "\012\ufff6\016\ufff6\001\002\000\040\012\uffb8\016\uffb8\024" +
    "\uffb8\031\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\001" +
    "\002\000\004\023\073\001\002\000\004\023\066\001\002" +
    "\000\004\023\057\001\002\000\004\023\045\001\002\000" +
    "\040\004\033\005\027\013\040\030\046\036\026\037\030" +
    "\040\042\041\041\042\031\043\043\044\025\045\036\046" +
    "\035\047\032\050\044\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\004\024\050\001\002\000\040\012\uffa7\016\uffa7\024" +
    "\uffa7\031\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\001" +
    "\002\000\006\016\053\031\054\001\002\000\022\016\uffbb" +
    "\031\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\001\002\000\036\004\033\005\027\013\040\036\026" +
    "\037\030\040\042\041\041\042\031\043\043\044\025\045" +
    "\036\046\035\047\032\050\044\001\002\000\004\024\055" +
    "\001\002\000\040\012\uffa8\016\uffa8\024\uffa8\031\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\001\002\000\022\016" +
    "\uffbc\031\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\001\002\000\040\004\033\005\027\013\040\030" +
    "\060\036\026\037\030\040\042\041\041\042\031\043\043" +
    "\044\025\045\036\046\035\047\032\050\044\001\002\000" +
    "\036\004\033\005\027\013\040\036\026\037\030\040\042" +
    "\041\041\042\031\043\043\044\025\045\036\046\035\047" +
    "\032\050\044\001\002\000\004\024\062\001\002\000\040" +
    "\012\uffb1\016\uffb1\024\uffb1\031\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\001\002\000\006\016\053\031\064\001" +
    "\002\000\004\024\065\001\002\000\040\012\uffb2\016\uffb2" +
    "\024\uffb2\031\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\004\016\070\001" +
    "\002\000\036\004\033\005\027\013\040\036\026\037\030" +
    "\040\042\041\041\042\031\043\043\044\025\045\036\046" +
    "\035\047\032\050\044\001\002\000\004\024\072\001\002" +
    "\000\040\012\uffb5\016\uffb5\024\uffb5\031\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\001\002\000\036\004\033\005" +
    "\027\013\040\036\026\037\030\040\042\041\041\042\031" +
    "\043\043\044\025\045\036\046\035\047\032\050\044\001" +
    "\002\000\004\016\075\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\004\024\077\001\002\000\040\012\uffb4\016\uffb4\024" +
    "\uffb4\031\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001" +
    "\002\000\040\004\033\005\027\013\040\030\101\036\026" +
    "\037\030\040\042\041\041\042\031\043\043\044\025\045" +
    "\036\046\035\047\032\050\044\001\002\000\036\004\033" +
    "\005\027\013\040\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\004\024\103\001\002\000\040\012\uffad\016" +
    "\uffad\024\uffad\031\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\001\002\000\006\016\053\031\105\001\002\000\004" +
    "\024\106\001\002\000\040\012\uffae\016\uffae\024\uffae\031" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\001\002\000" +
    "\040\004\033\005\027\013\040\030\110\036\026\037\030" +
    "\040\042\041\041\042\031\043\043\044\025\045\036\046" +
    "\035\047\032\050\044\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\004\024\112\001\002\000\040\012\uffab\016\uffab\024" +
    "\uffab\031\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\001" +
    "\002\000\006\016\053\031\114\001\002\000\004\024\115" +
    "\001\002\000\040\012\uffac\016\uffac\024\uffac\031\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\050\uffac\001\002\000\036\004" +
    "\033\005\027\013\040\036\026\037\030\040\042\041\041" +
    "\042\031\043\043\044\025\045\036\046\035\047\032\050" +
    "\044\001\002\000\004\017\120\001\002\000\014\003\ufff8" +
    "\007\ufff8\010\ufff8\034\ufff8\035\ufff8\001\002\000\006\012" +
    "\ufff7\016\ufff7\001\002\000\040\004\033\005\027\013\040" +
    "\030\123\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\036\004\033\005\027\013\040\036\026\037\030\040" +
    "\042\041\041\042\031\043\043\044\025\045\036\046\035" +
    "\047\032\050\044\001\002\000\004\024\125\001\002\000" +
    "\040\012\uffa9\016\uffa9\024\uffa9\031\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\001\002\000\006\016\053\031\127" +
    "\001\002\000\004\024\130\001\002\000\040\012\uffaa\016" +
    "\uffaa\024\uffaa\031\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\001\002\000\036\004\033\005\027\013\040\036\026" +
    "\037\030\040\042\041\041\042\031\043\043\044\025\045" +
    "\036\046\035\047\032\050\044\001\002\000\004\016\133" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\004\024\135\001" +
    "\002\000\040\012\uffb3\016\uffb3\024\uffb3\031\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\001\002\000\036\004\033" +
    "\005\027\013\040\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\004\016\140\001\002\000\036\004\033\005" +
    "\027\013\040\036\026\037\030\040\042\041\041\042\031" +
    "\043\043\044\025\045\036\046\035\047\032\050\044\001" +
    "\002\000\004\024\142\001\002\000\040\012\uffb6\016\uffb6" +
    "\024\uffb6\031\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\004\016\145\001" +
    "\002\000\036\004\033\005\027\013\040\036\026\037\030" +
    "\040\042\041\041\042\031\043\043\044\025\045\036\046" +
    "\035\047\032\050\044\001\002\000\004\024\147\001\002" +
    "\000\040\012\uffb7\016\uffb7\024\uffb7\031\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\001\002\000\040\004\033\005" +
    "\027\013\040\030\151\036\026\037\030\040\042\041\041" +
    "\042\031\043\043\044\025\045\036\046\035\047\032\050" +
    "\044\001\002\000\036\004\033\005\027\013\040\036\026" +
    "\037\030\040\042\041\041\042\031\043\043\044\025\045" +
    "\036\046\035\047\032\050\044\001\002\000\004\024\153" +
    "\001\002\000\040\012\uffaf\016\uffaf\024\uffaf\031\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\001\002\000\006\016" +
    "\053\031\155\001\002\000\004\024\156\001\002\000\040" +
    "\012\uffb0\016\uffb0\024\uffb0\031\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\001\002\000\014\003\ufff9\007\ufff9\010" +
    "\ufff9\034\ufff9\035\ufff9\001\002\000\006\032\162\033\161" +
    "\001\002\000\004\015\174\001\002\000\004\030\163\001" +
    "\002\000\004\031\164\001\002\000\004\015\165\001\002" +
    "\000\004\013\166\001\002\000\004\025\167\001\002\000" +
    "\004\027\170\001\002\000\004\013\171\001\002\000\004" +
    "\012\172\001\002\000\004\017\173\001\002\000\014\003" +
    "\ufff4\007\ufff4\010\ufff4\034\ufff4\035\ufff4\001\002\000\004" +
    "\013\175\001\002\000\004\025\176\001\002\000\004\027" +
    "\177\001\002\000\036\004\033\005\027\013\040\036\201" +
    "\037\202\040\212\041\210\042\204\043\211\044\200\045" +
    "\207\046\205\047\203\050\213\001\002\000\004\023\u012e" +
    "\001\002\000\004\023\u011c\001\002\000\004\023\u010a\001" +
    "\002\000\004\023\374\001\002\000\004\023\352\001\002" +
    "\000\004\023\334\001\002\000\004\012\332\001\002\000" +
    "\004\023\314\001\002\000\004\023\272\001\002\000\004" +
    "\023\254\001\002\000\004\023\232\001\002\000\004\023" +
    "\214\001\002\000\040\004\033\005\027\013\040\030\215" +
    "\036\026\037\030\040\042\041\041\042\031\043\043\044" +
    "\025\045\036\046\035\047\032\050\044\001\002\000\036" +
    "\004\033\005\027\013\040\036\026\037\030\040\042\041" +
    "\041\042\031\043\043\044\025\045\036\046\035\047\032" +
    "\050\044\001\002\000\006\031\221\050\220\001\002\000" +
    "\010\016\053\031\054\050\uffc0\001\002\000\004\023\225" +
    "\001\002\000\004\024\222\001\002\000\004\012\223\001" +
    "\002\000\004\017\224\001\002\000\014\003\uffe9\007\uffe9" +
    "\010\uffe9\034\uffe9\035\uffe9\001\002\000\004\030\226\001" +
    "\002\000\036\004\033\005\027\013\040\036\026\037\030" +
    "\040\042\041\041\042\031\043\043\044\025\045\036\046" +
    "\035\047\032\050\044\001\002\000\006\016\053\031\230" +
    "\001\002\000\004\024\231\001\002\000\006\031\uffbf\050" +
    "\uffbf\001\002\000\036\004\033\005\027\013\040\036\026" +
    "\037\030\040\042\041\041\042\031\043\043\044\025\045" +
    "\036\046\035\047\032\050\044\001\002\000\016\024\242" +
    "\036\241\037\237\040\243\041\244\042\240\001\002\000" +
    "\004\016\235\001\002\000\036\004\033\005\027\013\040" +
    "\036\026\037\030\040\042\041\041\042\031\043\043\044" +
    "\025\045\036\046\035\047\032\050\044\001\002\000\016" +
    "\024\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001" +
    "\002\000\036\004\033\005\027\013\040\036\026\037\030" +
    "\040\042\041\041\042\031\043\043\044\025\045\036\046" +
    "\035\047\032\050\044\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\036\004\033\005\027\013\040\036\026\037\030\040" +
    "\042\041\041\042\031\043\043\044\025\045\036\046\035" +
    "\047\032\050\044\001\002\000\004\012\247\001\002\000" +
    "\036\004\033\005\027\013\040\036\026\037\030\040\042" +
    "\041\041\042\031\043\043\044\025\045\036\046\035\047" +
    "\032\050\044\001\002\000\036\004\033\005\027\013\040" +
    "\036\026\037\030\040\042\041\041\042\031\043\043\044" +
    "\025\045\036\046\035\047\032\050\044\001\002\000\016" +
    "\024\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\001" +
    "\002\000\016\024\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\001\002\000\004\017\250\001\002\000\014\003" +
    "\ufff1\007\ufff1\010\ufff1\034\ufff1\035\ufff1\001\002\000\016" +
    "\024\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\001" +
    "\002\000\016\024\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\001\002\000\016\024\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\001\002\000\040\004\033\005\027" +
    "\013\040\030\255\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\006\031\261\043" +
    "\260\001\002\000\010\016\053\031\064\043\uffca\001\002" +
    "\000\004\023\265\001\002\000\004\024\262\001\002\000" +
    "\004\012\263\001\002\000\004\017\264\001\002\000\014" +
    "\003\uffee\007\uffee\010\uffee\034\uffee\035\uffee\001\002\000" +
    "\004\030\266\001\002\000\036\004\033\005\027\013\040" +
    "\036\026\037\030\040\042\041\041\042\031\043\043\044" +
    "\025\045\036\046\035\047\032\050\044\001\002\000\006" +
    "\016\053\031\270\001\002\000\004\024\271\001\002\000" +
    "\006\031\uffc9\043\uffc9\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\004\016\312\001\002\000\016\024\300\036\277\037" +
    "\276\040\301\041\302\042\275\001\002\000\036\004\033" +
    "\005\027\013\040\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\036\004\033\005" +
    "\027\013\040\036\026\037\030\040\042\041\041\042\031" +
    "\043\043\044\025\045\036\046\035\047\032\050\044\001" +
    "\002\000\004\012\305\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\036\004\033\005\027\013\040\036\026\037\030\040" +
    "\042\041\041\042\031\043\043\044\025\045\036\046\035" +
    "\047\032\050\044\001\002\000\016\024\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000\016\024\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001\002\000" +
    "\004\017\306\001\002\000\014\003\ufff0\007\ufff0\010\ufff0" +
    "\034\ufff0\035\ufff0\001\002\000\016\024\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\016\024\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002\000" +
    "\016\024\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\016\024\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\001\002\000\040" +
    "\004\033\005\027\013\040\030\315\036\026\037\030\040" +
    "\042\041\041\042\031\043\043\044\025\045\036\046\035" +
    "\047\032\050\044\001\002\000\036\004\033\005\027\013" +
    "\040\036\026\037\030\040\042\041\041\042\031\043\043" +
    "\044\025\045\036\046\035\047\032\050\044\001\002\000" +
    "\006\031\321\045\320\001\002\000\010\016\053\031\105" +
    "\045\uffc6\001\002\000\004\023\325\001\002\000\004\024" +
    "\322\001\002\000\004\012\323\001\002\000\004\017\324" +
    "\001\002\000\014\003\uffec\007\uffec\010\uffec\034\uffec\035" +
    "\uffec\001\002\000\004\030\326\001\002\000\036\004\033" +
    "\005\027\013\040\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\006\016\053\031\330\001\002\000\004\024" +
    "\331\001\002\000\006\031\uffc5\045\uffc5\001\002\000\004" +
    "\017\333\001\002\000\014\003\ufff5\007\ufff5\010\ufff5\034" +
    "\ufff5\035\ufff5\001\002\000\040\004\033\005\027\013\040" +
    "\030\335\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\036\004\033\005\027\013\040\036\026\037\030\040" +
    "\042\041\041\042\031\043\043\044\025\045\036\046\035" +
    "\047\032\050\044\001\002\000\010\016\053\031\114\046" +
    "\uffc4\001\002\000\006\031\341\046\340\001\002\000\004" +
    "\023\345\001\002\000\004\024\342\001\002\000\004\012" +
    "\343\001\002\000\004\017\344\001\002\000\014\003\uffeb" +
    "\007\uffeb\010\uffeb\034\uffeb\035\uffeb\001\002\000\004\030" +
    "\346\001\002\000\036\004\033\005\027\013\040\036\026" +
    "\037\030\040\042\041\041\042\031\043\043\044\025\045" +
    "\036\046\035\047\032\050\044\001\002\000\006\016\053" +
    "\031\350\001\002\000\004\024\351\001\002\000\006\031" +
    "\uffc3\046\uffc3\001\002\000\036\004\033\005\027\013\040" +
    "\036\026\037\030\040\042\041\041\042\031\043\043\044" +
    "\025\045\036\046\035\047\032\050\044\001\002\000\016" +
    "\024\362\036\361\037\360\040\363\041\364\042\357\001" +
    "\002\000\004\016\355\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\016\024\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\001\002\000\036\004\033\005\027\013\040\036\026" +
    "\037\030\040\042\041\041\042\031\043\043\044\025\045" +
    "\036\046\035\047\032\050\044\001\002\000\036\004\033" +
    "\005\027\013\040\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\004\012\367\001" +
    "\002\000\036\004\033\005\027\013\040\036\026\037\030" +
    "\040\042\041\041\042\031\043\043\044\025\045\036\046" +
    "\035\047\032\050\044\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\016\024\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\001\002\000\016\024\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\001\002\000\004\017\370\001\002\000" +
    "\014\003\uffef\007\uffef\010\uffef\034\uffef\035\uffef\001\002" +
    "\000\016\024\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\001\002\000\016\024\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\001\002\000\016\024\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\001\002\000\040\004\033" +
    "\005\027\013\040\030\375\036\026\037\030\040\042\041" +
    "\041\042\031\043\043\044\025\045\036\046\035\047\032" +
    "\050\044\001\002\000\036\004\033\005\027\013\040\036" +
    "\026\037\030\040\042\041\041\042\031\043\043\044\025" +
    "\045\036\046\035\047\032\050\044\001\002\000\010\016" +
    "\053\031\127\047\uffc2\001\002\000\006\031\u0100\047\u0101" +
    "\001\002\000\004\024\u0107\001\002\000\004\023\u0102\001" +
    "\002\000\004\030\u0103\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\006\016\053\031\u0105\001\002\000\004\024\u0106\001" +
    "\002\000\006\031\uffc1\047\uffc1\001\002\000\004\012\u0108" +
    "\001\002\000\004\017\u0109\001\002\000\014\003\uffea\007" +
    "\uffea\010\uffea\034\uffea\035\uffea\001\002\000\036\004\033" +
    "\005\027\013\040\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\016\024\u0112\036\u0111\037\u0110\040\u0113\041" +
    "\u0114\042\u010f\001\002\000\004\016\u010d\001\002\000\036" +
    "\004\033\005\027\013\040\036\026\037\030\040\042\041" +
    "\041\042\031\043\043\044\025\045\036\046\035\047\032" +
    "\050\044\001\002\000\016\024\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\036\004\033\005\027\013\040\036\026\037\030\040" +
    "\042\041\041\042\031\043\043\044\025\045\036\046\035" +
    "\047\032\050\044\001\002\000\036\004\033\005\027\013" +
    "\040\036\026\037\030\040\042\041\041\042\031\043\043" +
    "\044\025\045\036\046\035\047\032\050\044\001\002\000" +
    "\004\012\u0117\001\002\000\036\004\033\005\027\013\040" +
    "\036\026\037\030\040\042\041\041\042\031\043\043\044" +
    "\025\045\036\046\035\047\032\050\044\001\002\000\036" +
    "\004\033\005\027\013\040\036\026\037\030\040\042\041" +
    "\041\042\031\043\043\044\025\045\036\046\035\047\032" +
    "\050\044\001\002\000\016\024\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\001\002\000\016\024\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002\000\004\017" +
    "\u0118\001\002\000\014\003\ufff2\007\ufff2\010\ufff2\034\ufff2" +
    "\035\ufff2\001\002\000\016\024\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\001\002\000\016\024\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002\000\016\024" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002" +
    "\000\036\004\033\005\027\013\040\036\026\037\030\040" +
    "\042\041\041\042\031\043\043\044\025\045\036\046\035" +
    "\047\032\050\044\001\002\000\016\024\u0124\036\u0123\037" +
    "\u0122\040\u0125\041\u0126\042\u0121\001\002\000\004\016\u011f" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\016\024\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002\000\036" +
    "\004\033\005\027\013\040\036\026\037\030\040\042\041" +
    "\041\042\031\043\043\044\025\045\036\046\035\047\032" +
    "\050\044\001\002\000\036\004\033\005\027\013\040\036" +
    "\026\037\030\040\042\041\041\042\031\043\043\044\025" +
    "\045\036\046\035\047\032\050\044\001\002\000\036\004" +
    "\033\005\027\013\040\036\026\037\030\040\042\041\041" +
    "\042\031\043\043\044\025\045\036\046\035\047\032\050" +
    "\044\001\002\000\004\012\u0129\001\002\000\036\004\033" +
    "\005\027\013\040\036\026\037\030\040\042\041\041\042" +
    "\031\043\043\044\025\045\036\046\035\047\032\050\044" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\016\024\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\001\002\000\016" +
    "\024\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\004\017\u012a\001\002\000\014\003\ufff3\007\ufff3" +
    "\010\ufff3\034\ufff3\035\ufff3\001\002\000\016\024\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\016" +
    "\024\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\001" +
    "\002\000\016\024\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\001\002\000\040\004\033\005\027\013\040\030" +
    "\u012f\036\026\037\030\040\042\041\041\042\031\043\043" +
    "\044\025\045\036\046\035\047\032\050\044\001\002\000" +
    "\036\004\033\005\027\013\040\036\026\037\030\040\042" +
    "\041\041\042\031\043\043\044\025\045\036\046\035\047" +
    "\032\050\044\001\002\000\010\016\053\031\155\044\uffc8" +
    "\001\002\000\006\031\u0133\044\u0132\001\002\000\004\023" +
    "\u0137\001\002\000\004\024\u0134\001\002\000\004\012\u0135" +
    "\001\002\000\004\017\u0136\001\002\000\014\003\uffed\007" +
    "\uffed\010\uffed\034\uffed\035\uffed\001\002\000\004\030\u0138" +
    "\001\002\000\036\004\033\005\027\013\040\036\026\037" +
    "\030\040\042\041\041\042\031\043\043\044\025\045\036" +
    "\046\035\047\032\050\044\001\002\000\006\016\053\031" +
    "\u013a\001\002\000\004\024\u013b\001\002\000\006\031\uffc7" +
    "\044\uffc7\001\002\000\006\032\u013e\033\u013d\001\002\000" +
    "\004\015\u014a\001\002\000\004\030\u013f\001\002\000\004" +
    "\031\u0140\001\002\000\004\015\u0141\001\002\000\004\013" +
    "\u0142\001\002\000\004\025\u0143\001\002\000\004\027\u0144" +
    "\001\002\000\004\030\u0145\001\002\000\036\004\033\005" +
    "\027\013\040\036\026\037\030\040\042\041\041\042\031" +
    "\043\043\044\025\045\036\046\035\047\032\050\044\001" +
    "\002\000\006\016\053\031\u0147\001\002\000\004\012\u0148" +
    "\001\002\000\004\017\u0149\001\002\000\014\003\uffbd\007" +
    "\uffbd\010\uffbd\034\uffbd\035\uffbd\001\002\000\004\013\u014b" +
    "\001\002\000\004\025\u014c\001\002\000\004\027\u014d\001" +
    "\002\000\004\030\u014e\001\002\000\036\004\033\005\027" +
    "\013\040\036\026\037\030\040\042\041\041\042\031\043" +
    "\043\044\025\045\036\046\035\047\032\050\044\001\002" +
    "\000\006\016\053\031\u0150\001\002\000\004\012\u0151\001" +
    "\002\000\004\017\u0152\001\002\000\014\003\uffbe\007\uffbe" +
    "\010\uffbe\034\uffbe\035\uffbe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\012\005\016\007\007\010\015\011\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\012\007\020\010\015\011\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\033\006\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\046\001\001\000" +
    "\006\006\051\012\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\060\001\001\000\006\006\051\012" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\066\001\001\000\002\001\001\000\004\006\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\073\001" +
    "\001\000\002\001\001\000\004\006\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\101\001\001\000" +
    "\006\006\051\012\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\110\001\001\000\006\006\051\012\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\123\001\001\000\006\006\051\012\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\131" +
    "\001\001\000\002\001\001\000\004\006\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\136\001\001" +
    "\000\002\001\001\000\004\006\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\143\001\001\000\002" +
    "\001\001\000\004\006\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\151\001\001\000\006\006\051" +
    "\012\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\046\001\001\000\010\006\051\012\216\025\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\051\012" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\233\015\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\235\001\001\000\002" +
    "\001\001\000\004\006\252\001\001\000\004\006\251\001" +
    "\001\000\004\006\250\001\001\000\002\001\001\000\004" +
    "\006\245\001\001\000\004\006\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\060\001\001\000\010\006\051\012\256\020\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\051\012" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\272\016\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\310\001\001\000\004" +
    "\006\307\001\001\000\004\006\306\001\001\000\002\001" +
    "\001\000\004\006\303\001\001\000\004\006\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\312\001\001\000\002\001\001\000" +
    "\004\006\101\001\001\000\010\006\051\012\316\022\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\051\012" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\110\001\001\000\010\006\051\012\335\023\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\051\012\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\353\017\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\355\001\001\000\002\001\001" +
    "\000\004\006\372\001\001\000\004\006\371\001\001\000" +
    "\004\006\370\001\001\000\002\001\001\000\004\006\365" +
    "\001\001\000\004\006\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\123\001\001\000\010\006\051\012\375\024\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\051\012\u0103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u010b\014\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u010d\001\001\000\002\001\001" +
    "\000\004\006\u011a\001\001\000\004\006\u0119\001\001\000" +
    "\004\006\u0118\001\001\000\002\001\001\000\004\006\u0115" +
    "\001\001\000\004\006\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u011d\013\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u011f\001\001\000\002\001\001\000\004\006" +
    "\u012c\001\001\000\004\006\u012b\001\001\000\004\006\u012a" +
    "\001\001\000\002\001\001\000\004\006\u0127\001\001\000" +
    "\004\006\u0126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\151\001\001" +
    "\000\010\006\051\012\u012f\021\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\051\012\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\051\012\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\051\012" +
    "\u014e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
           Funcioness.TextoConsola.consola += "Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado"+"\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
           Funcioness.TextoConsola.consola += "Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion."+"\n";
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM lista_instrucciones END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= PROGRAM END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= imprimir_consola 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS PRINT IGUAL siguiente END PUNTOYCOMA 
            {
              Object RESULT =null;
		Funcioness.TextoConsola.consola += "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_consola",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // siguiente ::= siguiente COMA expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Funcioness.TextoConsola.consola += val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // siguiente ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Funcioness.TextoConsola.consola += val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables ::= VAR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION ID END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION SUM PARENTESIS_A operacionsum PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION RES PARENTESIS_A operacionres PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MUL PARENTESIS_A operacionmul PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION DIV PARENTESIS_A operaciondiv PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MOD PARENTESIS_A operacionmod PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIA PARENTESIS_A CORCHETE_A operacionmedia CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIANA PARENTESIS_A CORCHETE_A operacionmediana CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MODA PARENTESIS_A CORCHETE_A operacionmoda CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION VARIANZA PARENTESIS_A CORCHETE_A operacionvarianza CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MAX PARENTESIS_A CORCHETE_A operacionmax CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MIN PARENTESIS_A CORCHETE_A operacionmin CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Funcioness.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacionsum ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacionsum ::= operacionsum SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacionsum ::= operacionsum RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacionsum ::= operacionsum MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacionsum ::= operacionsum DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacionsum ::= operacionsum MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacionres ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacionres ::= operacionres RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacionres ::= operacionres SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacionres ::= operacionres MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacionres ::= operacionres DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacionres ::= operacionres MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacionmul ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacionmul ::= operacionmul MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacionmul ::= operacionmul RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacionmul ::= operacionmul SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacionmul ::= operacionmul DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacionmul ::= operacionmul MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciondiv ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciondiv ::= operaciondiv DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciondiv ::= operaciondiv MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciondiv ::= operaciondiv RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciondiv ::= operaciondiv SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciondiv ::= operaciondiv MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacionmod ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacionmod ::= operacionmod MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacionmod ::= operacionmod DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacionmod ::= operacionmod MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacionmod ::= operacionmod RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacionmod ::= operacionmod SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacionmedia ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionmedia ::= operacionmedia MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacionmediana ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionmediana ::= operacionmediana MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionmoda ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacionmoda ::= operacionmoda MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacionvarianza ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacionvarianza ::= operacionvarianza VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionmax ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacionmax ::= operacionmax MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacionmin ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =Funcioness.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacionmin ::= operacionmin MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arreglos ::= ARR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
       Funcioness.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
       Funcioness.Instruccion.mostrarLista((LinkedList<String>) lista);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arreglos ::= ARR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
       Funcioness.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
       Funcioness.Instruccion.mostrarLista((LinkedList<String>) lista);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaelemen ::= listaelemen COMA expresion 
            {
              Object RESULT =null;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        LinkedList<String> lista = (LinkedList<String>) listexp;
        lista.add(exp1.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // listaelemen ::= expresion 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        LinkedList<String> lista = new LinkedList<>();
        lista.add(exp2.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= NUMERODECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                    Object resulta =Funcioness.Instruccion.obtenerValor(val);
                                                                    if(resulta != null && resulta instanceof LinkedList){
                                                                        RESULT = resulta;
                                                                    } 
                                                                    else if(resulta != null && resulta instanceof String){
                                                                        RESULT = resulta.toString();
                                                                    }else{
                                                                       RESULT = val.toString(); 
                                                                    }
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= SUM PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= RES PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= MUL PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= DIV PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= MOD PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= MEDIA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= MEDIANA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= MODA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= VARIANZA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= MAX PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =Funcioness.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= MIN PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =Funcioness.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
