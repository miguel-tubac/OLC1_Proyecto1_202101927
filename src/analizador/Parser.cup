// ------------  Paquete e importaciones ------------
package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            FuncionTokens.TextoConsola.consola += "Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado"+"\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            FuncionTokens.TextoConsola.consola += "Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion."+"\n";
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String ENTERO;
terminal String NUMERODECIMAL;
terminal String PROGRAM, END_PROGRAM;
terminal String CONSOLE, PRINT, END;
terminal String ID, COMILLAS;
terminal String DOSPUNTOS, DOBLEDOSPUNTOS;
terminal String COMA, PUNTOYCOMA, IGUAL, ARROBA;
terminal String POR;
terminal String MAS;
terminal String PARENTESIS_A, PARENTESIS_C;
terminal String MENOR, MAYOR, GUION;
terminal String CORCHETE_A, CORCHETE_C;
terminal String CHAR, DOUBLE, VAR, ARR;




//------> Declaración de no terminales
non terminal inicio;
non terminal imprimir_consola;
non terminal lista_instrucciones;
non terminal expresion;
non terminal instruccion;
non terminal variables;
non terminal arreglos, listaelemen;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= PROGRAM lista_instrucciones END_PROGRAM
;


lista_instrucciones ::=   lista_instrucciones instruccion
    | instruccion
;

instruccion ::= imprimir_consola 
    | variables
    | arreglos
    | error PUNTOYCOMA
;

imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS PRINT IGUAL expresion:val END PUNTOYCOMA {: FuncionTokens.TextoConsola.consola += val.toString()+"\n"; :}
;

variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION expresion:val END PUNTOYCOMA 
                            {: FuncionTokens.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID:var MENOR GUION ID:val END PUNTOYCOMA
                            {: FuncionTokens.Instruccion.agregarValor(var.toString(), val.toString()); :}
;

arreglos ::= ARR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ARROBA ID:var MENOR GUION CORCHETE_A listaelemen:lista CORCHETE_C END PUNTOYCOMA
    {:
        FuncionTokens.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
        FuncionTokens.Instruccion.mostrarLista((LinkedList<String>) lista);
    :}

    | ARR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ARROBA ID:var MENOR GUION CORCHETE_A listaelemen:lista CORCHETE_C END PUNTOYCOMA
    {: 
        FuncionTokens.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
        FuncionTokens.Instruccion.mostrarLista((LinkedList<String>) lista);
    :}
;


listaelemen ::= listaelemen:listexp COMA expresion:exp1       
    {: 
        LinkedList<String> lista = (LinkedList<String>) listexp;
        lista.add(exp1.toString());
        RESULT = lista;
    :}

    | expresion:exp2    
    {:  
        LinkedList<String> lista = new LinkedList<>();
        lista.add(exp2.toString());
        RESULT = lista;
    :}
;


expresion ::= NUMERODECIMAL:val                                  {: RESULT = val.toString(); :}
    | ENTERO:val                                                 {: RESULT = val.toString(); :}
    | ID:val                                                    {: 
                                                                    String com = FuncionTokens.Instruccion.obtenerValor(val.toString());
                                                                    if(com != null){
                                                                        RESULT = com;
                                                                    } else{
                                                                       RESULT = val.toString(); 
                                                                    }
                                                                :}
;
