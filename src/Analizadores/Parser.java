
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\005\004\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\003\011\000\002\003\014\000\002\026\005\000\002" +
    "\026\003\000\002\004\005\000\002\004\003\000\002\010" +
    "\014\000\002\010\016\000\002\010\017\000\002\010\017" +
    "\000\002\010\017\000\002\010\017\000\002\010\017\000" +
    "\002\010\021\000\002\010\021\000\002\010\021\000\002" +
    "\010\021\000\002\010\021\000\002\010\021\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\020\003\000\002\020\011\000\002\021\003\000" +
    "\002\021\011\000\002\022\003\000\002\022\011\000\002" +
    "\023\003\000\002\023\011\000\002\024\003\000\002\024" +
    "\011\000\002\025\003\000\002\025\011\000\002\011\016" +
    "\000\002\011\020\000\002\012\005\000\002\012\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\006" +
    "\000\002\006\010\000\002\006\006\000\002\006\010\000" +
    "\002\006\006\000\002\006\010\000\002\006\006\000\002" +
    "\006\010\000\002\006\006\000\002\006\010\000\002\006" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\004\006\005\001\002\000\004\002\u015f\001" +
    "\002\000\014\003\014\007\007\010\015\032\011\033\006" +
    "\001\002\000\004\014\u0148\001\002\000\004\002\uffff\001" +
    "\002\000\014\003\ufffd\007\ufffd\010\ufffd\032\ufffd\033\ufffd" +
    "\001\002\000\004\014\174\001\002\000\014\003\ufffa\007" +
    "\ufffa\010\ufffa\032\ufffa\033\ufffa\001\002\000\014\003\ufffc" +
    "\007\ufffc\010\ufffc\032\ufffc\033\ufffc\001\002\000\004\017" +
    "\173\001\002\000\004\015\022\001\002\000\014\003\ufffb" +
    "\007\ufffb\010\ufffb\032\ufffb\033\ufffb\001\002\000\014\003" +
    "\014\007\020\010\015\032\011\033\006\001\002\000\004" +
    "\002\000\001\002\000\014\003\ufffe\007\ufffe\010\ufffe\032" +
    "\ufffe\033\ufffe\001\002\000\006\011\023\047\024\001\002" +
    "\000\004\020\164\001\002\000\004\020\025\001\002\000" +
    "\036\004\034\005\027\013\040\034\030\035\031\036\042" +
    "\037\041\040\032\041\043\042\026\043\037\044\035\045" +
    "\033\046\044\001\002\000\004\021\155\001\002\000\042" +
    "\012\uffb7\016\uffb7\022\uffb7\025\uffb7\027\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\001\002\000\004\021\150\001" +
    "\002\000\004\021\143\001\002\000\004\021\136\001\002" +
    "\000\004\021\127\001\002\000\042\012\uffb6\016\uffb6\022" +
    "\uffb6\025\uffb6\027\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\001\002\000\004\021\120\001\002\000\004\025\107" +
    "\001\002\000\004\021\100\001\002\000\042\012\uffb5\016" +
    "\uffb5\022\uffb5\025\uffb5\027\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\001\002\000\004\021\073\001\002\000\004" +
    "\021\066\001\002\000\004\021\057\001\002\000\004\021" +
    "\045\001\002\000\040\004\034\005\027\013\040\026\046" +
    "\034\030\035\031\036\042\037\041\040\032\041\043\042" +
    "\026\043\037\044\035\045\033\046\044\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\004\022\050\001\002\000\042\012" +
    "\uffa4\016\uffa4\022\uffa4\025\uffa4\027\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\001\002\000\006\016\053\027\054" +
    "\001\002\000\022\016\uffb8\027\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\001\002\000\036\004\034" +
    "\005\027\013\040\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\004\022\055\001\002\000\042\012\uffa5\016" +
    "\uffa5\022\uffa5\025\uffa5\027\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\001\002\000\022\016\uffb9\027\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\001\002\000" +
    "\040\004\034\005\027\013\040\026\060\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\036\004\034\005\027" +
    "\013\040\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\004\022\062\001\002\000\042\012\uffae\016\uffae\022" +
    "\uffae\025\uffae\027\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\001\002\000\006\016\053\027\064\001\002\000\004" +
    "\022\065\001\002\000\042\012\uffaf\016\uffaf\022\uffaf\025" +
    "\uffaf\027\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\001" +
    "\002\000\036\004\034\005\027\013\040\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\004\016\070\001\002" +
    "\000\036\004\034\005\027\013\040\034\030\035\031\036" +
    "\042\037\041\040\032\041\043\042\026\043\037\044\035" +
    "\045\033\046\044\001\002\000\004\022\072\001\002\000" +
    "\042\012\uffb2\016\uffb2\022\uffb2\025\uffb2\027\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002\000\036\004\034" +
    "\005\027\013\040\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\004\016\075\001\002\000\036\004\034\005" +
    "\027\013\040\034\030\035\031\036\042\037\041\040\032" +
    "\041\043\042\026\043\037\044\035\045\033\046\044\001" +
    "\002\000\004\022\077\001\002\000\042\012\uffb1\016\uffb1" +
    "\022\uffb1\025\uffb1\027\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\001\002\000\040\004\034\005\027\013\040\026" +
    "\101\034\030\035\031\036\042\037\041\040\032\041\043" +
    "\042\026\043\037\044\035\045\033\046\044\001\002\000" +
    "\036\004\034\005\027\013\040\034\030\035\031\036\042" +
    "\037\041\040\032\041\043\042\026\043\037\044\035\045" +
    "\033\046\044\001\002\000\004\022\103\001\002\000\042" +
    "\012\uffaa\016\uffaa\022\uffaa\025\uffaa\027\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\001\002\000\006\016\053\027" +
    "\105\001\002\000\004\022\106\001\002\000\042\012\uffab" +
    "\016\uffab\022\uffab\025\uffab\027\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\001\002\000\004\024\110\001\002\000" +
    "\040\004\034\005\027\013\040\026\112\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\004\012\116\001\002" +
    "\000\036\004\034\005\027\013\040\034\030\035\031\036" +
    "\042\037\041\040\032\041\043\042\026\043\037\044\035" +
    "\045\033\046\044\001\002\000\004\012\ufff5\001\002\000" +
    "\006\016\053\027\115\001\002\000\004\012\ufff6\001\002" +
    "\000\004\017\117\001\002\000\014\003\ufff7\007\ufff7\010" +
    "\ufff7\032\ufff7\033\ufff7\001\002\000\040\004\034\005\027" +
    "\013\040\026\121\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\036\004\034\005\027\013\040\034\030\035" +
    "\031\036\042\037\041\040\032\041\043\042\026\043\037" +
    "\044\035\045\033\046\044\001\002\000\004\022\123\001" +
    "\002\000\042\012\uffa8\016\uffa8\022\uffa8\025\uffa8\027\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\001\002\000\006" +
    "\016\053\027\125\001\002\000\004\022\126\001\002\000" +
    "\042\012\uffa9\016\uffa9\022\uffa9\025\uffa9\027\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\001\002\000\040\004\034" +
    "\005\027\013\040\026\130\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\036\004\034\005\027\013\040\034" +
    "\030\035\031\036\042\037\041\040\032\041\043\042\026" +
    "\043\037\044\035\045\033\046\044\001\002\000\004\022" +
    "\132\001\002\000\042\012\uffa6\016\uffa6\022\uffa6\025\uffa6" +
    "\027\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\001\002" +
    "\000\006\016\053\027\134\001\002\000\004\022\135\001" +
    "\002\000\042\012\uffa7\016\uffa7\022\uffa7\025\uffa7\027\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\004\016\140\001\002\000\036\004" +
    "\034\005\027\013\040\034\030\035\031\036\042\037\041" +
    "\040\032\041\043\042\026\043\037\044\035\045\033\046" +
    "\044\001\002\000\004\022\142\001\002\000\042\012\uffb0" +
    "\016\uffb0\022\uffb0\025\uffb0\027\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\001\002\000\036\004\034\005\027\013" +
    "\040\034\030\035\031\036\042\037\041\040\032\041\043" +
    "\042\026\043\037\044\035\045\033\046\044\001\002\000" +
    "\004\016\145\001\002\000\036\004\034\005\027\013\040" +
    "\034\030\035\031\036\042\037\041\040\032\041\043\042" +
    "\026\043\037\044\035\045\033\046\044\001\002\000\004" +
    "\022\147\001\002\000\042\012\uffb3\016\uffb3\022\uffb3\025" +
    "\uffb3\027\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\001" +
    "\002\000\036\004\034\005\027\013\040\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\004\016\152\001\002" +
    "\000\036\004\034\005\027\013\040\034\030\035\031\036" +
    "\042\037\041\040\032\041\043\042\026\043\037\044\035" +
    "\045\033\046\044\001\002\000\004\022\154\001\002\000" +
    "\042\012\uffb4\016\uffb4\022\uffb4\025\uffb4\027\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\001\002\000\040\004\034" +
    "\005\027\013\040\026\156\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\036\004\034\005\027\013\040\034" +
    "\030\035\031\036\042\037\041\040\032\041\043\042\026" +
    "\043\037\044\035\045\033\046\044\001\002\000\004\022" +
    "\160\001\002\000\042\012\uffac\016\uffac\022\uffac\025\uffac" +
    "\027\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\001\002" +
    "\000\006\016\053\027\162\001\002\000\004\022\163\001" +
    "\002\000\042\012\uffad\016\uffad\022\uffad\025\uffad\027\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\006\012\170\016\167\001\002\000" +
    "\006\012\ufff3\016\ufff3\001\002\000\036\004\034\005\027" +
    "\013\040\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\004\017\171\001\002\000\014\003\ufff8\007\ufff8\010" +
    "\ufff8\032\ufff8\033\ufff8\001\002\000\006\012\ufff4\016\ufff4" +
    "\001\002\000\014\003\ufff9\007\ufff9\010\ufff9\032\ufff9\033" +
    "\ufff9\001\002\000\006\030\176\031\175\001\002\000\004" +
    "\015\210\001\002\000\004\026\177\001\002\000\004\027" +
    "\200\001\002\000\004\015\201\001\002\000\004\013\202" +
    "\001\002\000\004\023\203\001\002\000\004\025\204\001" +
    "\002\000\004\013\205\001\002\000\004\012\206\001\002" +
    "\000\004\017\207\001\002\000\014\003\ufff1\007\ufff1\010" +
    "\ufff1\032\ufff1\033\ufff1\001\002\000\004\013\211\001\002" +
    "\000\004\023\212\001\002\000\004\025\213\001\002\000" +
    "\036\004\034\005\027\013\040\034\215\035\216\036\225" +
    "\037\224\040\220\041\226\042\214\043\223\044\221\045" +
    "\217\046\227\001\002\000\004\021\u013a\001\002\000\004" +
    "\021\u0128\001\002\000\004\021\u0116\001\002\000\004\021" +
    "\u0108\001\002\000\004\021\366\001\002\000\004\021\350" +
    "\001\002\000\004\012\346\001\002\000\004\021\330\001" +
    "\002\000\004\021\306\001\002\000\004\021\264\001\002" +
    "\000\004\021\246\001\002\000\004\021\230\001\002\000" +
    "\040\004\034\005\027\013\040\026\231\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\036\004\034\005\027" +
    "\013\040\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\006\027\235\046\234\001\002\000\010\016\053\027" +
    "\054\046\uffbd\001\002\000\004\021\241\001\002\000\004" +
    "\022\236\001\002\000\004\012\237\001\002\000\004\017" +
    "\240\001\002\000\014\003\uffe6\007\uffe6\010\uffe6\032\uffe6" +
    "\033\uffe6\001\002\000\004\026\242\001\002\000\036\004" +
    "\034\005\027\013\040\034\030\035\031\036\042\037\041" +
    "\040\032\041\043\042\026\043\037\044\035\045\033\046" +
    "\044\001\002\000\006\016\053\027\244\001\002\000\004" +
    "\022\245\001\002\000\006\027\uffbc\046\uffbc\001\002\000" +
    "\040\004\034\005\027\013\040\026\247\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\036\004\034\005\027" +
    "\013\040\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\006\027\252\041\253\001\002\000\010\016\053\027" +
    "\064\041\uffc7\001\002\000\004\022\261\001\002\000\004" +
    "\021\254\001\002\000\004\026\255\001\002\000\036\004" +
    "\034\005\027\013\040\034\030\035\031\036\042\037\041" +
    "\040\032\041\043\042\026\043\037\044\035\045\033\046" +
    "\044\001\002\000\006\016\053\027\257\001\002\000\004" +
    "\022\260\001\002\000\006\027\uffc6\041\uffc6\001\002\000" +
    "\004\012\262\001\002\000\004\017\263\001\002\000\014" +
    "\003\uffeb\007\uffeb\010\uffeb\032\uffeb\033\uffeb\001\002\000" +
    "\036\004\034\005\027\013\040\034\030\035\031\036\042" +
    "\037\041\040\032\041\043\042\026\043\037\044\035\045" +
    "\033\046\044\001\002\000\016\022\274\034\273\035\271" +
    "\036\275\037\276\040\272\001\002\000\004\016\267\001" +
    "\002\000\036\004\034\005\027\013\040\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\016\022\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002\000\036\004" +
    "\034\005\027\013\040\034\030\035\031\036\042\037\041" +
    "\040\032\041\043\042\026\043\037\044\035\045\033\046" +
    "\044\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\036\004\034" +
    "\005\027\013\040\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\004\012\301\001\002\000\036\004\034\005" +
    "\027\013\040\034\030\035\031\036\042\037\041\040\032" +
    "\041\043\042\026\043\037\044\035\045\033\046\044\001" +
    "\002\000\036\004\034\005\027\013\040\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\016\022\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002\000\016\022" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\001\002" +
    "\000\004\017\302\001\002\000\014\003\uffee\007\uffee\010" +
    "\uffee\032\uffee\033\uffee\001\002\000\016\022\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002\000\016\022" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002" +
    "\000\016\022\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\004\016\326" +
    "\001\002\000\016\022\314\034\313\035\312\036\315\037" +
    "\316\040\311\001\002\000\036\004\034\005\027\013\040" +
    "\034\030\035\031\036\042\037\041\040\032\041\043\042" +
    "\026\043\037\044\035\045\033\046\044\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\036\004\034\005\027\013\040\034" +
    "\030\035\031\036\042\037\041\040\032\041\043\042\026" +
    "\043\037\044\035\045\033\046\044\001\002\000\004\012" +
    "\321\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\036\004\034" +
    "\005\027\013\040\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\016\022\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\001\002\000\016\022\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\001\002\000\004\017\322\001" +
    "\002\000\014\003\uffed\007\uffed\010\uffed\032\uffed\033\uffed" +
    "\001\002\000\016\022\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\001\002\000\016\022\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\001\002\000\016\022\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\016\022\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\001\002\000\040\004\034\005\027" +
    "\013\040\026\331\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\036\004\034\005\027\013\040\034\030\035" +
    "\031\036\042\037\041\040\032\041\043\042\026\043\037" +
    "\044\035\045\033\046\044\001\002\000\006\027\335\043" +
    "\334\001\002\000\010\016\053\027\105\043\uffc3\001\002" +
    "\000\004\021\341\001\002\000\004\022\336\001\002\000" +
    "\004\012\337\001\002\000\004\017\340\001\002\000\014" +
    "\003\uffe9\007\uffe9\010\uffe9\032\uffe9\033\uffe9\001\002\000" +
    "\004\026\342\001\002\000\036\004\034\005\027\013\040" +
    "\034\030\035\031\036\042\037\041\040\032\041\043\042" +
    "\026\043\037\044\035\045\033\046\044\001\002\000\006" +
    "\016\053\027\344\001\002\000\004\022\345\001\002\000" +
    "\006\027\uffc2\043\uffc2\001\002\000\004\017\347\001\002" +
    "\000\014\003\ufff2\007\ufff2\010\ufff2\032\ufff2\033\ufff2\001" +
    "\002\000\040\004\034\005\027\013\040\026\351\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\036\004\034" +
    "\005\027\013\040\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\010\016\053\027\125\044\uffc1\001\002\000" +
    "\006\027\355\044\354\001\002\000\004\021\361\001\002" +
    "\000\004\022\356\001\002\000\004\012\357\001\002\000" +
    "\004\017\360\001\002\000\014\003\uffe8\007\uffe8\010\uffe8" +
    "\032\uffe8\033\uffe8\001\002\000\004\026\362\001\002\000" +
    "\036\004\034\005\027\013\040\034\030\035\031\036\042" +
    "\037\041\040\032\041\043\042\026\043\037\044\035\045" +
    "\033\046\044\001\002\000\006\016\053\027\364\001\002" +
    "\000\004\022\365\001\002\000\006\027\uffc0\044\uffc0\001" +
    "\002\000\036\004\034\005\027\013\040\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\016\022\376\034\375" +
    "\035\374\036\377\037\u0100\040\373\001\002\000\004\016" +
    "\371\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\016\022\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\001\002\000" +
    "\036\004\034\005\027\013\040\034\030\035\031\036\042" +
    "\037\041\040\032\041\043\042\026\043\037\044\035\045" +
    "\033\046\044\001\002\000\036\004\034\005\027\013\040" +
    "\034\030\035\031\036\042\037\041\040\032\041\043\042" +
    "\026\043\037\044\035\045\033\046\044\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\004\012\u0103\001\002\000\036\004" +
    "\034\005\027\013\040\034\030\035\031\036\042\037\041" +
    "\040\032\041\043\042\026\043\037\044\035\045\033\046" +
    "\044\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\016\022\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001\002\000" +
    "\016\022\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\001\002\000\004\017\u0104\001\002\000\014\003\uffec\007" +
    "\uffec\010\uffec\032\uffec\033\uffec\001\002\000\016\022\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\001\002\000" +
    "\016\022\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\001\002\000\016\022\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\001\002\000\040\004\034\005\027\013\040" +
    "\026\u0109\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\036\004\034\005\027\013\040\034\030\035\031\036" +
    "\042\037\041\040\032\041\043\042\026\043\037\044\035" +
    "\045\033\046\044\001\002\000\010\016\053\027\134\045" +
    "\uffbf\001\002\000\006\027\u010d\045\u010c\001\002\000\004" +
    "\021\u0111\001\002\000\004\022\u010e\001\002\000\004\012" +
    "\u010f\001\002\000\004\017\u0110\001\002\000\014\003\uffe7" +
    "\007\uffe7\010\uffe7\032\uffe7\033\uffe7\001\002\000\004\026" +
    "\u0112\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\006\016\053" +
    "\027\u0114\001\002\000\004\022\u0115\001\002\000\006\027" +
    "\uffbe\045\uffbe\001\002\000\036\004\034\005\027\013\040" +
    "\034\030\035\031\036\042\037\041\040\032\041\043\042" +
    "\026\043\037\044\035\045\033\046\044\001\002\000\016" +
    "\022\u011e\034\u011d\035\u011c\036\u011f\037\u0120\040\u011b\001" +
    "\002\000\004\016\u0119\001\002\000\036\004\034\005\027" +
    "\013\040\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\016\022\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\036\004\034" +
    "\005\027\013\040\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\036\004\034\005\027\013\040\034\030\035" +
    "\031\036\042\037\041\040\032\041\043\042\026\043\037" +
    "\044\035\045\033\046\044\001\002\000\004\012\u0123\001" +
    "\002\000\036\004\034\005\027\013\040\034\030\035\031" +
    "\036\042\037\041\040\032\041\043\042\026\043\037\044" +
    "\035\045\033\046\044\001\002\000\036\004\034\005\027" +
    "\013\040\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\016\022\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\001\002\000\016\022\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\001\002\000\004\017\u0124\001\002\000" +
    "\014\003\uffef\007\uffef\010\uffef\032\uffef\033\uffef\001\002" +
    "\000\016\022\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\001\002\000\016\022\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\001\002\000\016\022\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\001\002\000\036\004\034" +
    "\005\027\013\040\034\030\035\031\036\042\037\041\040" +
    "\032\041\043\042\026\043\037\044\035\045\033\046\044" +
    "\001\002\000\016\022\u0130\034\u012f\035\u012d\036\u0131\037" +
    "\u0132\040\u012e\001\002\000\004\016\u012b\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\016\022\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\001\002\000\036\004\034\005\027" +
    "\013\040\034\030\035\031\036\042\037\041\040\032\041" +
    "\043\042\026\043\037\044\035\045\033\046\044\001\002" +
    "\000\036\004\034\005\027\013\040\034\030\035\031\036" +
    "\042\037\041\040\032\041\043\042\026\043\037\044\035" +
    "\045\033\046\044\001\002\000\036\004\034\005\027\013" +
    "\040\034\030\035\031\036\042\037\041\040\032\041\043" +
    "\042\026\043\037\044\035\045\033\046\044\001\002\000" +
    "\004\012\u0135\001\002\000\036\004\034\005\027\013\040" +
    "\034\030\035\031\036\042\037\041\040\032\041\043\042" +
    "\026\043\037\044\035\045\033\046\044\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\016\022\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\001\002\000\016\022\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\004\017" +
    "\u0136\001\002\000\014\003\ufff0\007\ufff0\010\ufff0\032\ufff0" +
    "\033\ufff0\001\002\000\016\022\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\001\002\000\016\022\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\016\022" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002" +
    "\000\040\004\034\005\027\013\040\026\u013b\034\030\035" +
    "\031\036\042\037\041\040\032\041\043\042\026\043\037" +
    "\044\035\045\033\046\044\001\002\000\036\004\034\005" +
    "\027\013\040\034\030\035\031\036\042\037\041\040\032" +
    "\041\043\042\026\043\037\044\035\045\033\046\044\001" +
    "\002\000\010\016\053\027\162\042\uffc5\001\002\000\006" +
    "\027\u013f\042\u013e\001\002\000\004\021\u0143\001\002\000" +
    "\004\022\u0140\001\002\000\004\012\u0141\001\002\000\004" +
    "\017\u0142\001\002\000\014\003\uffea\007\uffea\010\uffea\032" +
    "\uffea\033\uffea\001\002\000\004\026\u0144\001\002\000\036" +
    "\004\034\005\027\013\040\034\030\035\031\036\042\037" +
    "\041\040\032\041\043\042\026\043\037\044\035\045\033" +
    "\046\044\001\002\000\006\016\053\027\u0146\001\002\000" +
    "\004\022\u0147\001\002\000\006\027\uffc4\042\uffc4\001\002" +
    "\000\006\030\u014a\031\u0149\001\002\000\004\015\u0156\001" +
    "\002\000\004\026\u014b\001\002\000\004\027\u014c\001\002" +
    "\000\004\015\u014d\001\002\000\004\013\u014e\001\002\000" +
    "\004\023\u014f\001\002\000\004\025\u0150\001\002\000\004" +
    "\026\u0151\001\002\000\036\004\034\005\027\013\040\034" +
    "\030\035\031\036\042\037\041\040\032\041\043\042\026" +
    "\043\037\044\035\045\033\046\044\001\002\000\006\016" +
    "\053\027\u0153\001\002\000\004\012\u0154\001\002\000\004" +
    "\017\u0155\001\002\000\014\003\uffba\007\uffba\010\uffba\032" +
    "\uffba\033\uffba\001\002\000\004\013\u0157\001\002\000\004" +
    "\023\u0158\001\002\000\004\025\u0159\001\002\000\004\026" +
    "\u015a\001\002\000\036\004\034\005\027\013\040\034\030" +
    "\035\031\036\042\037\041\040\032\041\043\042\026\043" +
    "\037\044\035\045\033\046\044\001\002\000\006\016\053" +
    "\027\u015c\001\002\000\004\012\u015d\001\002\000\004\017" +
    "\u015e\001\002\000\014\003\uffbb\007\uffbb\010\uffbb\032\uffbb" +
    "\033\uffbb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\012\005\016\007\007\010\015\011\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\012\007\020\010\015\011\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\046\001\001\000\006\006" +
    "\051\012\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\060\001\001\000\006\006\051\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\066\001" +
    "\001\000\002\001\001\000\004\006\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\073\001\001\000" +
    "\002\001\001\000\004\006\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\101\001\001\000\006\006" +
    "\051\012\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\112\026\110\001\001\000\002" +
    "\001\001\000\006\006\051\012\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\121\001\001\000\006\006" +
    "\051\012\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\130\001\001\000\006\006\051\012\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\136\001\001" +
    "\000\002\001\001\000\004\006\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\143\001\001\000\002" +
    "\001\001\000\004\006\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\150\001\001\000\002\001\001" +
    "\000\004\006\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\156\001\001\000\006\006\051\012\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\164" +
    "\006\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\046\001\001\000\010" +
    "\006\051\012\232\025\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\051\012\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\060\001" +
    "\001\000\010\006\051\012\250\020\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\051\012\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\265\015\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\267\001\001\000\002\001\001\000\004" +
    "\006\304\001\001\000\004\006\303\001\001\000\004\006" +
    "\302\001\001\000\002\001\001\000\004\006\277\001\001" +
    "\000\004\006\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\306\016" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\324\001\001\000\004\006\323\001\001\000\004\006" +
    "\322\001\001\000\002\001\001\000\004\006\317\001\001" +
    "\000\004\006\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\326\001" +
    "\001\000\002\001\001\000\004\006\101\001\001\000\010" +
    "\006\051\012\332\022\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\051\012\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\121\001\001\000\010\006\051" +
    "\012\351\023\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\051\012\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\367\017\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\371" +
    "\001\001\000\002\001\001\000\004\006\u0106\001\001\000" +
    "\004\006\u0105\001\001\000\004\006\u0104\001\001\000\002" +
    "\001\001\000\004\006\u0101\001\001\000\004\006\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\130\001\001\000\010\006\051" +
    "\012\u0109\024\u010a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\051\012\u0112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u0117\014\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0119" +
    "\001\001\000\002\001\001\000\004\006\u0126\001\001\000" +
    "\004\006\u0125\001\001\000\004\006\u0124\001\001\000\002" +
    "\001\001\000\004\006\u0121\001\001\000\004\006\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0129\013\u0128\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u012b\001\001\000" +
    "\002\001\001\000\004\006\u0138\001\001\000\004\006\u0137" +
    "\001\001\000\004\006\u0136\001\001\000\002\001\001\000" +
    "\004\006\u0133\001\001\000\004\006\u0132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\156\001\001\000\010\006\051\012\u013b\021" +
    "\u013c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\051" +
    "\012\u0144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\051\012\u0151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\051\012\u015a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Funciones.Instruccion.agregarError("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado"+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Funciones.Instruccion.agregarError("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion."+"\n");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM lista_instrucciones END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= PROGRAM END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= imprimir_consola 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS PRINT IGUAL siguiente END PUNTOYCOMA 
            {
              Object RESULT =null;
		 Funciones.Instruccion.agregarTexto("\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_consola",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS COLUMN IGUAL expresion GUION MAYOR imprimir_arreglo END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
            Funciones.Expresion.mostrarLista(var.toString() , (LinkedList<String>) lista);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_consola",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imprimir_arreglo ::= CORCHETE_A listaelemen CORCHETE_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // imprimir_arreglo ::= expresion 
            {
              Object RESULT =null;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = (LinkedList<String>) listexp;
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // siguiente ::= siguiente COMA expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Funciones.Instruccion.agregarTexto(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // siguiente ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Funciones.Instruccion.agregarTexto(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= VAR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION ID END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION SUM PARENTESIS_A operacionsum PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION RES PARENTESIS_A operacionres PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MUL PARENTESIS_A operacionmul PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION DIV PARENTESIS_A operaciondiv PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MOD PARENTESIS_A operacionmod PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIA PARENTESIS_A CORCHETE_A operacionmedia CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIANA PARENTESIS_A CORCHETE_A operacionmediana CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MODA PARENTESIS_A CORCHETE_A operacionmoda CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION VARIANZA PARENTESIS_A CORCHETE_A operacionvarianza CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MAX PARENTESIS_A CORCHETE_A operacionmax CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MIN PARENTESIS_A CORCHETE_A operacionmin CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacionsum ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacionsum ::= operacionsum SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacionsum ::= operacionsum RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacionsum ::= operacionsum MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacionsum ::= operacionsum DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacionsum ::= operacionsum MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacionres ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacionres ::= operacionres RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacionres ::= operacionres SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacionres ::= operacionres MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacionres ::= operacionres DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacionres ::= operacionres MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacionmul ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacionmul ::= operacionmul MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacionmul ::= operacionmul RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacionmul ::= operacionmul SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacionmul ::= operacionmul DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacionmul ::= operacionmul MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciondiv ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciondiv ::= operaciondiv DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciondiv ::= operaciondiv MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciondiv ::= operaciondiv RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciondiv ::= operaciondiv SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciondiv ::= operaciondiv MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacionmod ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacionmod ::= operacionmod MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacionmod ::= operacionmod DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacionmod ::= operacionmod MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionmod ::= operacionmod RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacionmod ::= operacionmod SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionmedia ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionmedia ::= operacionmedia MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacionmediana ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacionmediana ::= operacionmediana MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacionmoda ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionmoda ::= operacionmoda MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacionvarianza ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacionvarianza ::= operacionvarianza VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacionmax ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacionmax ::= operacionmax MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacionmin ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacionmin ::= operacionmin MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arreglos ::= ARR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arreglos ::= ARR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listaelemen ::= listaelemen COMA expresion 
            {
              Object RESULT =null;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        LinkedList<String> lista = (LinkedList<String>) listexp;
        lista.add(exp1.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaelemen ::= expresion 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        LinkedList<String> lista = new LinkedList<>();
        lista.add(exp2.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= NUMERODECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                    Object resulta = Funciones.Instruccion.obtenerValor(val);
                                                                    if(resulta != null && resulta instanceof LinkedList){
                                                                        RESULT = resulta;
                                                                    } 
                                                                    else if(resulta != null && resulta instanceof String){
                                                                        RESULT = resulta.toString();
                                                                    }else{
                                                                       RESULT = val.toString(); 
                                                                    }
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= SUM PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= RES PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= MUL PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= DIV PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= MOD PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= MEDIA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= MEDIANA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= MODA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= VARIANZA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= MAX PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= MIN PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
