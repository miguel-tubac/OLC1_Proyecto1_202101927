
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import InterfasGrafica.FrameInicio;
import Funciones.Errores;
import Funciones.Simbolos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\005\004\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\003\011\000\002\003\014\000\002" +
    "\026\005\000\002\026\003\000\002\004\005\000\002\004" +
    "\003\000\002\010\014\000\002\010\016\000\002\010\017" +
    "\000\002\010\017\000\002\010\017\000\002\010\017\000" +
    "\002\010\017\000\002\010\021\000\002\010\021\000\002" +
    "\010\021\000\002\010\021\000\002\010\021\000\002\010" +
    "\021\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\020\003\000\002\020\011\000" +
    "\002\021\003\000\002\021\011\000\002\022\003\000\002" +
    "\022\011\000\002\023\003\000\002\023\011\000\002\024" +
    "\003\000\002\024\011\000\002\025\003\000\002\025\011" +
    "\000\002\011\016\000\002\011\020\000\002\012\005\000" +
    "\002\012\003\000\002\027\014\000\002\027\013\000\002" +
    "\027\010\000\002\027\014\000\002\027\013\000\002\027" +
    "\010\000\002\027\014\000\002\027\013\000\002\027\010" +
    "\000\002\027\014\000\002\027\013\000\002\027\010\000" +
    "\002\030\004\000\002\030\003\000\002\032\004\000\002" +
    "\032\003\000\002\034\004\000\002\034\003\000\002\036" +
    "\004\000\002\036\003\000\002\031\013\000\002\031\015" +
    "\000\002\031\013\000\002\031\013\000\002\031\011\000" +
    "\002\031\013\000\002\031\013\000\002\033\015\000\002" +
    "\033\013\000\002\033\013\000\002\033\011\000\002\033" +
    "\013\000\002\035\013\000\002\035\015\000\002\035\013" +
    "\000\002\035\013\000\002\035\011\000\002\035\013\000" +
    "\002\035\013\000\002\037\013\000\002\037\013\000\002" +
    "\037\011\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\006\000\002\006\010\000\002\006\006\000\002" +
    "\006\010\000\002\006\006\000\002\006\010\000\002\006" +
    "\006\000\002\006\010\000\002\006\006\000\002\006\010" +
    "\000\002\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0254\000\004\006\005\001\002\000\004\002\u0256\001" +
    "\002\000\024\003\017\007\012\010\021\032\014\033\006" +
    "\050\007\057\023\062\010\063\011\001\002\000\004\014" +
    "\u023f\001\002\000\004\021\u01f6\001\002\000\004\021\u01ad" +
    "\001\002\000\004\021\u0184\001\002\000\004\002\uffff\001" +
    "\002\000\024\003\ufffd\007\ufffd\010\ufffd\032\ufffd\033\ufffd" +
    "\050\ufffd\057\ufffd\062\ufffd\063\ufffd\001\002\000\004\014" +
    "\270\001\002\000\024\003\ufffa\007\ufffa\010\ufffa\032\ufffa" +
    "\033\ufffa\050\ufffa\057\ufffa\062\ufffa\063\ufffa\001\002\000" +
    "\024\003\ufffc\007\ufffc\010\ufffc\032\ufffc\033\ufffc\050\ufffc" +
    "\057\ufffc\062\ufffc\063\ufffc\001\002\000\004\017\267\001" +
    "\002\000\024\003\ufff9\007\ufff9\010\ufff9\032\ufff9\033\ufff9" +
    "\050\ufff9\057\ufff9\062\ufff9\063\ufff9\001\002\000\004\015" +
    "\242\001\002\000\024\003\ufffb\007\ufffb\010\ufffb\032\ufffb" +
    "\033\ufffb\050\ufffb\057\ufffb\062\ufffb\063\ufffb\001\002\000" +
    "\004\021\027\001\002\000\024\003\017\007\025\010\021" +
    "\032\014\033\006\050\007\057\023\062\010\063\011\001" +
    "\002\000\004\002\000\001\002\000\024\003\ufffe\007\ufffe" +
    "\010\ufffe\032\ufffe\033\ufffe\050\ufffe\057\ufffe\062\ufffe\063" +
    "\ufffe\001\002\000\010\051\031\060\032\061\030\001\002" +
    "\000\004\015\227\001\002\000\004\015\217\001\002\000" +
    "\004\015\056\001\002\000\016\022\035\051\031\056\037" +
    "\057\040\060\032\061\030\001\002\000\016\022\uffa7\051" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\001\002\000\004" +
    "\012\054\001\002\000\016\022\uffa8\051\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\001\002\000\004\057\046\001\002" +
    "\000\004\012\041\001\002\000\004\017\042\001\002\000" +
    "\004\022\043\001\002\000\004\012\044\001\002\000\004" +
    "\017\045\001\002\000\024\003\uffb2\007\uffb2\010\uffb2\032" +
    "\uffb2\033\uffb2\050\uffb2\057\uffb2\062\uffb2\063\uffb2\001\002" +
    "\000\004\012\047\001\002\000\004\017\050\001\002\000" +
    "\004\022\051\001\002\000\004\012\052\001\002\000\004" +
    "\017\053\001\002\000\024\003\uffb3\007\uffb3\010\uffb3\032" +
    "\uffb3\033\uffb3\050\uffb3\057\uffb3\062\uffb3\063\uffb3\001\002" +
    "\000\004\017\055\001\002\000\024\003\uffb1\007\uffb1\010" +
    "\uffb1\032\uffb1\033\uffb1\050\uffb1\057\uffb1\062\uffb1\063\uffb1" +
    "\001\002\000\004\030\057\001\002\000\004\026\060\001" +
    "\002\000\004\027\061\001\002\000\004\020\062\001\002" +
    "\000\040\004\071\005\065\013\077\026\073\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\004\021\210\001" +
    "\002\000\004\021\203\001\002\000\042\012\uff8c\016\uff8c" +
    "\022\uff8c\025\uff8c\027\uff8c\034\uff8c\035\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\001\002\000\004\021\176\001\002\000\004\021" +
    "\167\001\002\000\004\021\162\001\002\000\042\012\uff8b" +
    "\016\uff8b\022\uff8b\025\uff8b\027\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\001\002\000\004\021\153\001\002\000" +
    "\036\004\071\005\065\013\077\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\004\012\145\001\002\000\004" +
    "\021\136\001\002\000\004\021\131\001\002\000\042\012" +
    "\uff8a\016\uff8a\022\uff8a\025\uff8a\027\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\001\002\000\004\021\122\001\002" +
    "\000\004\021\115\001\002\000\004\021\103\001\002\000" +
    "\040\004\071\005\065\013\077\026\104\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\004\022\106\001\002\000\042\012\uff79\016\uff79\022" +
    "\uff79\025\uff79\027\uff79\034\uff79\035\uff79\036\uff79\037\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046" +
    "\uff79\001\002\000\006\016\111\027\112\001\002\000\022" +
    "\016\uffb7\027\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\001\002\000\036\004\071\005\065\013\077" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\004" +
    "\022\113\001\002\000\042\012\uff7a\016\uff7a\022\uff7a\025" +
    "\uff7a\027\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\001" +
    "\002\000\022\016\uffb8\027\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\001\002\000\036\004\071\005" +
    "\065\013\077\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\004\016\117\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\004\022\121\001\002\000\042\012\uff87\016\uff87\022" +
    "\uff87\025\uff87\027\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046" +
    "\uff87\001\002\000\040\004\071\005\065\013\077\026\123" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\004\022\125\001\002\000\042\012" +
    "\uff83\016\uff83\022\uff83\025\uff83\027\uff83\034\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\046\uff83\001\002\000\006\016\111\027\127" +
    "\001\002\000\004\022\130\001\002\000\042\012\uff84\016" +
    "\uff84\022\uff84\025\uff84\027\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\001\002\000\036\004\071\005\065\013\077" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\004" +
    "\016\133\001\002\000\036\004\071\005\065\013\077\034" +
    "\064\035\066\036\101\037\076\040\070\041\100\042\063" +
    "\043\075\044\072\045\067\046\102\001\002\000\004\022" +
    "\135\001\002\000\042\012\uff86\016\uff86\022\uff86\025\uff86" +
    "\027\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041" +
    "\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\001\002" +
    "\000\040\004\071\005\065\013\077\026\137\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\036\004\071\005" +
    "\065\013\077\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\004\022\141\001\002\000\042\012\uff7f\016\uff7f" +
    "\022\uff7f\025\uff7f\027\uff7f\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f" +
    "\046\uff7f\001\002\000\006\016\111\027\143\001\002\000" +
    "\004\022\144\001\002\000\042\012\uff80\016\uff80\022\uff80" +
    "\025\uff80\027\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80" +
    "\001\002\000\004\017\146\001\002\000\016\022\uff9a\051" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\001\002\000\006" +
    "\016\111\027\150\001\002\000\004\012\151\001\002\000" +
    "\004\017\152\001\002\000\016\022\uff9b\051\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\001\002\000\040\004\071\005" +
    "\065\013\077\026\154\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\036\004\071\005\065\013\077\034\064" +
    "\035\066\036\101\037\076\040\070\041\100\042\063\043" +
    "\075\044\072\045\067\046\102\001\002\000\004\022\156" +
    "\001\002\000\042\012\uff7d\016\uff7d\022\uff7d\025\uff7d\027" +
    "\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d" +
    "\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\001\002\000" +
    "\006\016\111\027\160\001\002\000\004\022\161\001\002" +
    "\000\042\012\uff7e\016\uff7e\022\uff7e\025\uff7e\027\uff7e\034" +
    "\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\044\uff7e\045\uff7e\046\uff7e\001\002\000\036\004" +
    "\071\005\065\013\077\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\004\016\164\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\004\022\166\001\002\000\042\012\uff85\016" +
    "\uff85\022\uff85\025\uff85\027\uff85\034\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045" +
    "\uff85\046\uff85\001\002\000\040\004\071\005\065\013\077" +
    "\026\170\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\036\004\071\005\065\013\077\034\064\035\066\036" +
    "\101\037\076\040\070\041\100\042\063\043\075\044\072" +
    "\045\067\046\102\001\002\000\004\022\172\001\002\000" +
    "\042\012\uff7b\016\uff7b\022\uff7b\025\uff7b\027\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\001\002\000\006\016\111" +
    "\027\174\001\002\000\004\022\175\001\002\000\042\012" +
    "\uff7c\016\uff7c\022\uff7c\025\uff7c\027\uff7c\034\uff7c\035\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\004\016\200\001\002\000\036\004\071\005\065\013" +
    "\077\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\004\022\202\001\002\000\042\012\uff88\016\uff88\022\uff88" +
    "\025\uff88\027\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\001\002\000\036\004\071\005\065\013\077\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\004\016\205\001" +
    "\002\000\036\004\071\005\065\013\077\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\004\022\207\001\002" +
    "\000\042\012\uff89\016\uff89\022\uff89\025\uff89\027\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\001\002\000\040\004" +
    "\071\005\065\013\077\026\211\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\036\004\071\005\065\013\077" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\004" +
    "\022\213\001\002\000\042\012\uff81\016\uff81\022\uff81\025" +
    "\uff81\027\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\001" +
    "\002\000\006\016\111\027\215\001\002\000\004\022\216" +
    "\001\002\000\042\012\uff82\016\uff82\022\uff82\025\uff82\027" +
    "\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\001\002\000" +
    "\004\030\220\001\002\000\004\026\221\001\002\000\004" +
    "\027\222\001\002\000\004\020\223\001\002\000\036\004" +
    "\071\005\065\013\077\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\004\012\225\001\002\000\004\017\226" +
    "\001\002\000\016\022\uff97\051\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\001\002\000\004\031\230\001\002\000\004" +
    "\020\231\001\002\000\040\004\071\005\065\013\077\026" +
    "\232\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\036\004\071\005\065\013\077\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\004\012\234\001\002\000\004" +
    "\017\235\001\002\000\016\022\uff98\051\uff98\056\uff98\057" +
    "\uff98\060\uff98\061\uff98\001\002\000\006\016\111\027\237" +
    "\001\002\000\004\012\240\001\002\000\004\017\241\001" +
    "\002\000\016\022\uff99\051\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\001\002\000\006\011\244\047\243\001\002\000" +
    "\004\020\254\001\002\000\004\020\245\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\006\012\251\016\250\001\002\000" +
    "\006\012\ufff2\016\ufff2\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\004\017\252\001\002\000\024\003\ufff7\007\ufff7\010" +
    "\ufff7\032\ufff7\033\ufff7\050\ufff7\057\ufff7\062\ufff7\063\ufff7" +
    "\001\002\000\006\012\ufff3\016\ufff3\001\002\000\036\004" +
    "\071\005\065\013\077\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\004\025\256\001\002\000\004\024\257" +
    "\001\002\000\040\004\071\005\065\013\077\026\261\034" +
    "\064\035\066\036\101\037\076\040\070\041\100\042\063" +
    "\043\075\044\072\045\067\046\102\001\002\000\004\012" +
    "\265\001\002\000\036\004\071\005\065\013\077\034\064" +
    "\035\066\036\101\037\076\040\070\041\100\042\063\043" +
    "\075\044\072\045\067\046\102\001\002\000\004\012\ufff4" +
    "\001\002\000\006\016\111\027\264\001\002\000\004\012" +
    "\ufff5\001\002\000\004\017\266\001\002\000\024\003\ufff6" +
    "\007\ufff6\010\ufff6\032\ufff6\033\ufff6\050\ufff6\057\ufff6\062" +
    "\ufff6\063\ufff6\001\002\000\024\003\ufff8\007\ufff8\010\ufff8" +
    "\032\ufff8\033\ufff8\050\ufff8\057\ufff8\062\ufff8\063\ufff8\001" +
    "\002\000\006\030\272\031\271\001\002\000\004\015\304" +
    "\001\002\000\004\026\273\001\002\000\004\027\274\001" +
    "\002\000\004\015\275\001\002\000\004\013\276\001\002" +
    "\000\004\023\277\001\002\000\004\025\300\001\002\000" +
    "\004\013\301\001\002\000\004\012\302\001\002\000\004" +
    "\017\303\001\002\000\024\003\ufff0\007\ufff0\010\ufff0\032" +
    "\ufff0\033\ufff0\050\ufff0\057\ufff0\062\ufff0\063\ufff0\001\002" +
    "\000\004\013\305\001\002\000\004\023\306\001\002\000" +
    "\004\025\307\001\002\000\036\004\071\005\065\013\077" +
    "\034\311\035\312\036\321\037\320\040\314\041\322\042" +
    "\310\043\317\044\315\045\313\046\323\001\002\000\004" +
    "\021\u0176\001\002\000\004\021\u0164\001\002\000\004\021" +
    "\u0152\001\002\000\004\021\u0144\001\002\000\004\021\u0132" +
    "\001\002\000\004\021\u0124\001\002\000\004\012\u0122\001" +
    "\002\000\004\021\u0114\001\002\000\004\021\u0102\001\002" +
    "\000\004\021\360\001\002\000\004\021\342\001\002\000" +
    "\004\021\324\001\002\000\040\004\071\005\065\013\077" +
    "\026\325\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\036\004\071\005\065\013\077\034\064\035\066\036" +
    "\101\037\076\040\070\041\100\042\063\043\075\044\072" +
    "\045\067\046\102\001\002\000\006\027\331\046\330\001" +
    "\002\000\010\016\111\027\112\046\uffbc\001\002\000\004" +
    "\021\335\001\002\000\004\022\332\001\002\000\004\012" +
    "\333\001\002\000\004\017\334\001\002\000\024\003\uffe5" +
    "\007\uffe5\010\uffe5\032\uffe5\033\uffe5\050\uffe5\057\uffe5\062" +
    "\uffe5\063\uffe5\001\002\000\004\026\336\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\006\016\111\027\340\001\002\000" +
    "\004\022\341\001\002\000\006\027\uffbb\046\uffbb\001\002" +
    "\000\040\004\071\005\065\013\077\026\343\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\036\004\071\005" +
    "\065\013\077\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\006\027\346\041\347\001\002\000\010\016\111" +
    "\027\127\041\uffc6\001\002\000\004\022\355\001\002\000" +
    "\004\021\350\001\002\000\004\026\351\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\006\016\111\027\353\001\002\000" +
    "\004\022\354\001\002\000\006\027\uffc5\041\uffc5\001\002" +
    "\000\004\012\356\001\002\000\004\017\357\001\002\000" +
    "\024\003\uffea\007\uffea\010\uffea\032\uffea\033\uffea\050\uffea" +
    "\057\uffea\062\uffea\063\uffea\001\002\000\036\004\071\005" +
    "\065\013\077\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\016\022\370\034\367\035\365\036\371\037\372" +
    "\040\366\001\002\000\004\016\363\001\002\000\036\004" +
    "\071\005\065\013\077\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\016\022\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\001\002\000\036\004\071\005\065\013" +
    "\077\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\036\004\071\005\065\013\077\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\036\004\071\005\065\013\077" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\004" +
    "\012\375\001\002\000\036\004\071\005\065\013\077\034" +
    "\064\035\066\036\101\037\076\040\070\041\100\042\063" +
    "\043\075\044\072\045\067\046\102\001\002\000\036\004" +
    "\071\005\065\013\077\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\016\022\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\001\002\000\016\022\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\001\002\000\004\017\376" +
    "\001\002\000\024\003\uffed\007\uffed\010\uffed\032\uffed\033" +
    "\uffed\050\uffed\057\uffed\062\uffed\063\uffed\001\002\000\016" +
    "\022\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001" +
    "\002\000\016\022\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\001\002\000\016\022\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\004\016\u0112\001\002\000\016\022\u0108\034\u0107\035" +
    "\u0106\036\u0109\037\u010a\040\u0105\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\036\004\071\005\065\013\077\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\036\004\071\005" +
    "\065\013\077\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\004\012\u010d\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\036\004\071\005\065\013\077\034\064\035\066\036" +
    "\101\037\076\040\070\041\100\042\063\043\075\044\072" +
    "\045\067\046\102\001\002\000\016\022\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\001\002\000\016\022\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\001\002\000" +
    "\004\017\u010e\001\002\000\024\003\uffec\007\uffec\010\uffec" +
    "\032\uffec\033\uffec\050\uffec\057\uffec\062\uffec\063\uffec\001" +
    "\002\000\016\022\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\001\002\000\016\022\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\001\002\000\016\022\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\001\002\000\036\004" +
    "\071\005\065\013\077\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\016\022\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\001\002\000\040\004\071\005\065\013" +
    "\077\026\u0115\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\036\004\071\005\065\013\077\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\006\027\u0119\043\u0118" +
    "\001\002\000\010\016\111\027\143\043\uffc2\001\002\000" +
    "\004\021\u011d\001\002\000\004\022\u011a\001\002\000\004" +
    "\012\u011b\001\002\000\004\017\u011c\001\002\000\024\003" +
    "\uffe8\007\uffe8\010\uffe8\032\uffe8\033\uffe8\050\uffe8\057\uffe8" +
    "\062\uffe8\063\uffe8\001\002\000\004\026\u011e\001\002\000" +
    "\036\004\071\005\065\013\077\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\006\016\111\027\u0120\001\002" +
    "\000\004\022\u0121\001\002\000\006\027\uffc1\043\uffc1\001" +
    "\002\000\004\017\u0123\001\002\000\024\003\ufff1\007\ufff1" +
    "\010\ufff1\032\ufff1\033\ufff1\050\ufff1\057\ufff1\062\ufff1\063" +
    "\ufff1\001\002\000\040\004\071\005\065\013\077\026\u0125" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\010\016\111\027\160\044\uffc0\001" +
    "\002\000\006\027\u0129\044\u0128\001\002\000\004\021\u012d" +
    "\001\002\000\004\022\u012a\001\002\000\004\012\u012b\001" +
    "\002\000\004\017\u012c\001\002\000\024\003\uffe7\007\uffe7" +
    "\010\uffe7\032\uffe7\033\uffe7\050\uffe7\057\uffe7\062\uffe7\063" +
    "\uffe7\001\002\000\004\026\u012e\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\006\016\111\027\u0130\001\002\000\004\022" +
    "\u0131\001\002\000\006\027\uffbf\044\uffbf\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\016\022\u013a\034\u0139\035\u0138\036" +
    "\u013b\037\u013c\040\u0137\001\002\000\004\016\u0135\001\002" +
    "\000\036\004\071\005\065\013\077\034\064\035\066\036" +
    "\101\037\076\040\070\041\100\042\063\043\075\044\072" +
    "\045\067\046\102\001\002\000\016\022\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\036\004\071\005\065\013\077\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\036\004\071\005" +
    "\065\013\077\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\004\012\u013f\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\036\004\071\005\065\013\077\034\064\035\066\036" +
    "\101\037\076\040\070\041\100\042\063\043\075\044\072" +
    "\045\067\046\102\001\002\000\016\022\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\001\002\000\016\022\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002\000" +
    "\004\017\u0140\001\002\000\024\003\uffeb\007\uffeb\010\uffeb" +
    "\032\uffeb\033\uffeb\050\uffeb\057\uffeb\062\uffeb\063\uffeb\001" +
    "\002\000\016\022\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\001\002\000\016\022\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\001\002\000\016\022\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001\002\000\040\004" +
    "\071\005\065\013\077\026\u0145\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\036\004\071\005\065\013\077" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\010" +
    "\016\111\027\174\045\uffbe\001\002\000\006\027\u0149\045" +
    "\u0148\001\002\000\004\021\u014d\001\002\000\004\022\u014a" +
    "\001\002\000\004\012\u014b\001\002\000\004\017\u014c\001" +
    "\002\000\024\003\uffe6\007\uffe6\010\uffe6\032\uffe6\033\uffe6" +
    "\050\uffe6\057\uffe6\062\uffe6\063\uffe6\001\002\000\004\026" +
    "\u014e\001\002\000\036\004\071\005\065\013\077\034\064" +
    "\035\066\036\101\037\076\040\070\041\100\042\063\043" +
    "\075\044\072\045\067\046\102\001\002\000\006\016\111" +
    "\027\u0150\001\002\000\004\022\u0151\001\002\000\006\027" +
    "\uffbd\045\uffbd\001\002\000\036\004\071\005\065\013\077" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\016" +
    "\022\u015a\034\u0159\035\u0157\036\u015b\037\u015c\040\u0158\001" +
    "\002\000\004\016\u0155\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\016\022\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\001\002\000\036\004\071\005\065\013\077\034\064" +
    "\035\066\036\101\037\076\040\070\041\100\042\063\043" +
    "\075\044\072\045\067\046\102\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\036\004\071\005\065\013\077\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\004\012\u015f\001" +
    "\002\000\036\004\071\005\065\013\077\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\016\022\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\001\002\000\016\022\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\001\002\000\004\017\u0160\001\002\000" +
    "\024\003\uffee\007\uffee\010\uffee\032\uffee\033\uffee\050\uffee" +
    "\057\uffee\062\uffee\063\uffee\001\002\000\016\022\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000\016" +
    "\022\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001" +
    "\002\000\016\022\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\001\002\000\036\004\071\005\065\013\077\034" +
    "\064\035\066\036\101\037\076\040\070\041\100\042\063" +
    "\043\075\044\072\045\067\046\102\001\002\000\016\022" +
    "\u016c\034\u016b\035\u0169\036\u016d\037\u016e\040\u016a\001\002" +
    "\000\004\016\u0167\001\002\000\036\004\071\005\065\013" +
    "\077\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\016\022\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\001\002\000\036\004\071\005\065\013\077\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\036\004\071\005" +
    "\065\013\077\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\036\004\071\005\065\013\077\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\004\012\u0171\001\002" +
    "\000\036\004\071\005\065\013\077\034\064\035\066\036" +
    "\101\037\076\040\070\041\100\042\063\043\075\044\072" +
    "\045\067\046\102\001\002\000\036\004\071\005\065\013" +
    "\077\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\016\022\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\001\002\000\016\022\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\001\002\000\004\017\u0172\001\002\000\024" +
    "\003\uffef\007\uffef\010\uffef\032\uffef\033\uffef\050\uffef\057" +
    "\uffef\062\uffef\063\uffef\001\002\000\016\022\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\016\022" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\001\002" +
    "\000\016\022\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\001\002\000\040\004\071\005\065\013\077\026\u0177" +
    "\034\064\035\066\036\101\037\076\040\070\041\100\042" +
    "\063\043\075\044\072\045\067\046\102\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\010\016\111\027\215\042\uffc4\001" +
    "\002\000\006\027\u017b\042\u017a\001\002\000\004\021\u017f" +
    "\001\002\000\004\022\u017c\001\002\000\004\012\u017d\001" +
    "\002\000\004\017\u017e\001\002\000\024\003\uffe9\007\uffe9" +
    "\010\uffe9\032\uffe9\033\uffe9\050\uffe9\057\uffe9\062\uffe9\063" +
    "\uffe9\001\002\000\004\026\u0180\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\006\016\111\027\u0182\001\002\000\004\022" +
    "\u0183\001\002\000\006\027\uffc3\042\uffc3\001\002\000\006" +
    "\051\u0185\061\u0186\001\002\000\004\015\u01a5\001\002\000" +
    "\004\015\u019a\001\002\000\014\022\uffa3\051\uffa3\056\uffa3" +
    "\061\uffa3\063\uffa3\001\002\000\014\022\u018a\051\u0185\056" +
    "\u018c\061\u0186\063\u018b\001\002\000\014\022\uffa4\051\uffa4" +
    "\056\uffa4\061\uffa4\063\uffa4\001\002\000\004\012\u0198\001" +
    "\002\000\004\012\u0193\001\002\000\004\063\u018d\001\002" +
    "\000\004\012\u018e\001\002\000\004\017\u018f\001\002\000" +
    "\004\022\u0190\001\002\000\004\012\u0191\001\002\000\004" +
    "\017\u0192\001\002\000\024\003\uffad\007\uffad\010\uffad\032" +
    "\uffad\033\uffad\050\uffad\057\uffad\062\uffad\063\uffad\001\002" +
    "\000\004\017\u0194\001\002\000\004\022\u0195\001\002\000" +
    "\004\012\u0196\001\002\000\004\017\u0197\001\002\000\024" +
    "\003\uffac\007\uffac\010\uffac\032\uffac\033\uffac\050\uffac\057" +
    "\uffac\062\uffac\063\uffac\001\002\000\004\017\u0199\001\002" +
    "\000\024\003\uffab\007\uffab\010\uffab\032\uffab\033\uffab\050" +
    "\uffab\057\uffab\062\uffab\063\uffab\001\002\000\004\031\u019b" +
    "\001\002\000\004\020\u019c\001\002\000\040\004\071\005" +
    "\065\013\077\026\u019d\034\064\035\066\036\101\037\076" +
    "\040\070\041\100\042\063\043\075\044\072\045\067\046" +
    "\102\001\002\000\036\004\071\005\065\013\077\034\064" +
    "\035\066\036\101\037\076\040\070\041\100\042\063\043" +
    "\075\044\072\045\067\046\102\001\002\000\004\012\u019f" +
    "\001\002\000\004\017\u01a0\001\002\000\014\022\uff8d\051" +
    "\uff8d\056\uff8d\061\uff8d\063\uff8d\001\002\000\006\016\111" +
    "\027\u01a2\001\002\000\004\012\u01a3\001\002\000\004\017" +
    "\u01a4\001\002\000\014\022\uff8e\051\uff8e\056\uff8e\061\uff8e" +
    "\063\uff8e\001\002\000\004\030\u01a6\001\002\000\004\026" +
    "\u01a7\001\002\000\004\027\u01a8\001\002\000\004\020\u01a9" +
    "\001\002\000\036\004\071\005\065\013\077\034\064\035" +
    "\066\036\101\037\076\040\070\041\100\042\063\043\075" +
    "\044\072\045\067\046\102\001\002\000\004\012\u01ab\001" +
    "\002\000\004\017\u01ac\001\002\000\014\022\uff8f\051\uff8f" +
    "\056\uff8f\061\uff8f\063\uff8f\001\002\000\014\051\u01af\052" +
    "\u01b4\053\u01b3\054\u01b1\055\u01b0\001\002\000\022\022\u01e7" +
    "\051\u01af\052\u01b4\053\u01b3\054\u01b1\055\u01b0\056\u01e5\062" +
    "\u01e6\001\002\000\004\015\u01dd\001\002\000\004\015\u01d5" +
    "\001\002\000\004\015\u01cd\001\002\000\022\022\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\062\uffa5" +
    "\001\002\000\004\015\u01c2\001\002\000\004\015\u01b5\001" +
    "\002\000\004\030\u01b6\001\002\000\004\026\u01b7\001\002" +
    "\000\004\027\u01b8\001\002\000\004\020\u01b9\001\002\000" +
    "\040\004\071\005\065\013\077\026\u01ba\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\036\004\071\005\065" +
    "\013\077\034\064\035\066\036\101\037\076\040\070\041" +
    "\100\042\063\043\075\044\072\045\067\046\102\001\002" +
    "\000\004\012\u01bc\001\002\000\004\017\u01bd\001\002\000" +
    "\022\022\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\062\uff94\001\002\000\006\016\111\027\u01bf\001" +
    "\002\000\004\012\u01c0\001\002\000\004\017\u01c1\001\002" +
    "\000\022\022\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\062\uff95\001\002\000\004\031\u01c3\001\002" +
    "\000\004\020\u01c4\001\002\000\040\004\071\005\065\013" +
    "\077\026\u01c5\034\064\035\066\036\101\037\076\040\070" +
    "\041\100\042\063\043\075\044\072\045\067\046\102\001" +
    "\002\000\036\004\071\005\065\013\077\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\004\012\u01c7\001\002" +
    "\000\004\017\u01c8\001\002\000\022\022\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\062\uff92\001\002" +
    "\000\006\016\111\027\u01ca\001\002\000\004\012\u01cb\001" +
    "\002\000\004\017\u01cc\001\002\000\022\022\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\062\uff93\001" +
    "\002\000\004\030\u01ce\001\002\000\004\026\u01cf\001\002" +
    "\000\004\027\u01d0\001\002\000\004\020\u01d1\001\002\000" +
    "\036\004\071\005\065\013\077\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\004\012\u01d3\001\002\000\004" +
    "\017\u01d4\001\002\000\022\022\uff91\051\uff91\052\uff91\053" +
    "\uff91\054\uff91\055\uff91\056\uff91\062\uff91\001\002\000\004" +
    "\030\u01d6\001\002\000\004\026\u01d7\001\002\000\004\027" +
    "\u01d8\001\002\000\004\020\u01d9\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\004\012\u01db\001\002\000\004\017\u01dc\001" +
    "\002\000\022\022\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\062\uff90\001\002\000\004\030\u01de\001" +
    "\002\000\004\026\u01df\001\002\000\004\027\u01e0\001\002" +
    "\000\004\020\u01e1\001\002\000\036\004\071\005\065\013" +
    "\077\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\004\012\u01e3\001\002\000\004\017\u01e4\001\002\000\022" +
    "\022\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\062\uff96\001\002\000\004\062\u01f0\001\002\000\004" +
    "\012\u01eb\001\002\000\004\012\u01e9\001\002\000\022\022" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\062\uffa6\001\002\000\004\017\u01ea\001\002\000\024\003" +
    "\uffae\007\uffae\010\uffae\032\uffae\033\uffae\050\uffae\057\uffae" +
    "\062\uffae\063\uffae\001\002\000\004\017\u01ec\001\002\000" +
    "\004\022\u01ed\001\002\000\004\012\u01ee\001\002\000\004" +
    "\017\u01ef\001\002\000\024\003\uffaf\007\uffaf\010\uffaf\032" +
    "\uffaf\033\uffaf\050\uffaf\057\uffaf\062\uffaf\063\uffaf\001\002" +
    "\000\004\012\u01f1\001\002\000\004\017\u01f2\001\002\000" +
    "\004\022\u01f3\001\002\000\004\012\u01f4\001\002\000\004" +
    "\017\u01f5\001\002\000\024\003\uffb0\007\uffb0\010\uffb0\032" +
    "\uffb0\033\uffb0\050\uffb0\057\uffb0\062\uffb0\063\uffb0\001\002" +
    "\000\014\051\u01f8\052\u01fd\053\u01fc\054\u01fb\055\u01f9\001" +
    "\002\000\022\022\u0231\050\u022e\051\u01f8\052\u01fd\053\u01fc" +
    "\054\u01fb\055\u01f9\056\u022f\001\002\000\004\015\u0226\001" +
    "\002\000\004\015\u021e\001\002\000\022\022\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\001" +
    "\002\000\004\015\u0216\001\002\000\004\015\u020b\001\002" +
    "\000\004\015\u01fe\001\002\000\004\030\u01ff\001\002\000" +
    "\004\026\u0200\001\002\000\004\027\u0201\001\002\000\004" +
    "\020\u0202\001\002\000\040\004\071\005\065\013\077\026" +
    "\u0203\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\036\004\071\005\065\013\077\034\064\035\066\036\101" +
    "\037\076\040\070\041\100\042\063\043\075\044\072\045" +
    "\067\046\102\001\002\000\004\012\u0205\001\002\000\004" +
    "\017\u0206\001\002\000\022\022\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002\000\006" +
    "\016\111\027\u0208\001\002\000\004\012\u0209\001\002\000" +
    "\004\017\u020a\001\002\000\022\022\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\001\002\000" +
    "\004\031\u020c\001\002\000\004\020\u020d\001\002\000\040" +
    "\004\071\005\065\013\077\026\u020e\034\064\035\066\036" +
    "\101\037\076\040\070\041\100\042\063\043\075\044\072" +
    "\045\067\046\102\001\002\000\036\004\071\005\065\013" +
    "\077\034\064\035\066\036\101\037\076\040\070\041\100" +
    "\042\063\043\075\044\072\045\067\046\102\001\002\000" +
    "\004\012\u0210\001\002\000\004\017\u0211\001\002\000\022" +
    "\022\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\001\002\000\006\016\111\027\u0213\001\002" +
    "\000\004\012\u0214\001\002\000\004\017\u0215\001\002\000" +
    "\022\022\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\001\002\000\004\030\u0217\001\002\000" +
    "\004\026\u0218\001\002\000\004\027\u0219\001\002\000\004" +
    "\020\u021a\001\002\000\036\004\071\005\065\013\077\034" +
    "\064\035\066\036\101\037\076\040\070\041\100\042\063" +
    "\043\075\044\072\045\067\046\102\001\002\000\004\012" +
    "\u021c\001\002\000\004\017\u021d\001\002\000\022\022\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\001\002\000\004\030\u021f\001\002\000\004\026\u0220" +
    "\001\002\000\004\027\u0221\001\002\000\004\020\u0222\001" +
    "\002\000\036\004\071\005\065\013\077\034\064\035\066" +
    "\036\101\037\076\040\070\041\100\042\063\043\075\044" +
    "\072\045\067\046\102\001\002\000\004\012\u0224\001\002" +
    "\000\004\017\u0225\001\002\000\022\022\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002" +
    "\000\004\030\u0227\001\002\000\004\026\u0228\001\002\000" +
    "\004\027\u0229\001\002\000\004\020\u022a\001\002\000\036" +
    "\004\071\005\065\013\077\034\064\035\066\036\101\037" +
    "\076\040\070\041\100\042\063\043\075\044\072\045\067" +
    "\046\102\001\002\000\004\012\u022c\001\002\000\004\017" +
    "\u022d\001\002\000\022\022\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002\000\004\012" +
    "\u023a\001\002\000\004\050\u0234\001\002\000\022\022\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\001\002\000\004\012\u0232\001\002\000\004\017\u0233" +
    "\001\002\000\024\003\uffb4\007\uffb4\010\uffb4\032\uffb4\033" +
    "\uffb4\050\uffb4\057\uffb4\062\uffb4\063\uffb4\001\002\000\004" +
    "\012\u0235\001\002\000\004\017\u0236\001\002\000\004\022" +
    "\u0237\001\002\000\004\012\u0238\001\002\000\004\017\u0239" +
    "\001\002\000\024\003\uffb6\007\uffb6\010\uffb6\032\uffb6\033" +
    "\uffb6\050\uffb6\057\uffb6\062\uffb6\063\uffb6\001\002\000\004" +
    "\017\u023b\001\002\000\004\022\u023c\001\002\000\004\012" +
    "\u023d\001\002\000\004\017\u023e\001\002\000\024\003\uffb5" +
    "\007\uffb5\010\uffb5\032\uffb5\033\uffb5\050\uffb5\057\uffb5\062" +
    "\uffb5\063\uffb5\001\002\000\006\030\u0241\031\u0240\001\002" +
    "\000\004\015\u024d\001\002\000\004\026\u0242\001\002\000" +
    "\004\027\u0243\001\002\000\004\015\u0244\001\002\000\004" +
    "\013\u0245\001\002\000\004\023\u0246\001\002\000\004\025" +
    "\u0247\001\002\000\004\026\u0248\001\002\000\036\004\071" +
    "\005\065\013\077\034\064\035\066\036\101\037\076\040" +
    "\070\041\100\042\063\043\075\044\072\045\067\046\102" +
    "\001\002\000\006\016\111\027\u024a\001\002\000\004\012" +
    "\u024b\001\002\000\004\017\u024c\001\002\000\024\003\uffb9" +
    "\007\uffb9\010\uffb9\032\uffb9\033\uffb9\050\uffb9\057\uffb9\062" +
    "\uffb9\063\uffb9\001\002\000\004\013\u024e\001\002\000\004" +
    "\023\u024f\001\002\000\004\025\u0250\001\002\000\004\026" +
    "\u0251\001\002\000\036\004\071\005\065\013\077\034\064" +
    "\035\066\036\101\037\076\040\070\041\100\042\063\043" +
    "\075\044\072\045\067\046\102\001\002\000\006\016\111" +
    "\027\u0253\001\002\000\004\012\u0254\001\002\000\004\017" +
    "\u0255\001\002\000\024\003\uffba\007\uffba\010\uffba\032\uffba" +
    "\033\uffba\050\uffba\057\uffba\062\uffba\063\uffba\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0254\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\015\005\023\007\012\010\021\011\014\027\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\015\007\025\010" +
    "\021\011\014\027\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\032\033\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\107\012\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\104\001" +
    "\001\000\006\006\107\012\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\115\001\001\000\002\001" +
    "\001\000\004\006\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\123\001\001\000\006\006\107\012" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\131\001\001\000\002\001\001\000\004\006\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\137\001" +
    "\001\000\006\006\107\012\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\154\001\001\000\006\006\107\012\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\162" +
    "\001\001\000\002\001\001\000\004\006\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\170\001\001" +
    "\000\006\006\107\012\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\176\001\001\000\002\001\001\000" +
    "\004\006\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\203\001\001\000\002\001\001\000\004\006" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\211\001\001\000\006\006\107\012\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\232" +
    "\001\001\000\006\006\107\012\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\245\006\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\261\026\257" +
    "\001\001\000\002\001\001\000\006\006\107\012\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\104" +
    "\001\001\000\010\006\107\012\326\025\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\107\012\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\123\001\001\000\010\006\107\012\344\020\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\107" +
    "\012\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\361\015\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\363\001\001\000\002" +
    "\001\001\000\004\006\u0100\001\001\000\004\006\377\001" +
    "\001\000\004\006\376\001\001\000\002\001\001\000\004" +
    "\006\373\001\001\000\004\006\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0102\016\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0110\001\001\000\004\006\u010f\001" +
    "\001\000\004\006\u010e\001\001\000\002\001\001\000\004" +
    "\006\u010b\001\001\000\004\006\u010a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0112\001\001\000\002\001\001\000\004\006\137" +
    "\001\001\000\010\006\107\012\u0116\022\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\107\012\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\154\001\001" +
    "\000\010\006\107\012\u0125\023\u0126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\107\012\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0133\017\u0132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0135\001\001\000\002\001\001\000\004\006" +
    "\u0142\001\001\000\004\006\u0141\001\001\000\004\006\u0140" +
    "\001\001\000\002\001\001\000\004\006\u013d\001\001\000" +
    "\004\006\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\170\001\001" +
    "\000\010\006\107\012\u0145\024\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\107\012\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0153\014\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0155\001\001\000\002\001\001\000\004\006" +
    "\u0162\001\001\000\004\006\u0161\001\001\000\004\006\u0160" +
    "\001\001\000\002\001\001\000\004\006\u015d\001\001\000" +
    "\004\006\u015c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0165\013\u0164" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0167\001\001\000\002\001\001\000\004\006\u0174\001\001" +
    "\000\004\006\u0173\001\001\000\004\006\u0172\001\001\000" +
    "\002\001\001\000\004\006\u016f\001\001\000\004\006\u016e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\211\001\001\000\010\006" +
    "\107\012\u0177\021\u0178\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\107\012\u0180\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\u0187\037\u0186" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u0188\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u019d\001\001\000\006" +
    "\006\107\012\u01a0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\u01ad\035\u01b1\001\001\000\004" +
    "\035\u01e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u01ba\001\001\000\006" +
    "\006\107\012\u01bd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u01c5\001\001\000\006\006\107" +
    "\012\u01c8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u01d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u01d9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u01e1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\u01f6\031\u01f9" +
    "\001\001\000\004\031\u022f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0203" +
    "\001\001\000\006\006\107\012\u0206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u020e\001\001" +
    "\000\006\006\107\012\u0211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u021a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u022a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\107\012" +
    "\u0248\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\107" +
    "\012\u0251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = "";
    Errores error;
    Simbolos sim;

    public void syntax_error(Symbol s)
    {
            //System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            error = new Errores("Sintactico","Se encontro en: "+ s.value + " no pertenece al lenguaje. Recuperado", s.right, s.left);
            Funciones.Instruccion.agregarError(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            //System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            error = new Errores("Sintactico","Se encontro en: "+ s.value + " no pertenece al lenguaje. Sin recuperacion.", s.right, s.left);
            Funciones.Instruccion.agregarError(error);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM lista_instrucciones END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= PROGRAM END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= imprimir_consola 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= graficas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS PRINT IGUAL siguiente END PUNTOYCOMA 
            {
              Object RESULT =null;
		 Funciones.Instruccion.agregarTexto("\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_consola",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS COLUMN IGUAL expresion GUION MAYOR imprimir_arreglo END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
            Funciones.Expresion.mostrarLista(var.toString() , (LinkedList<String>) lista);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_consola",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // imprimir_arreglo ::= CORCHETE_A listaelemen CORCHETE_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // imprimir_arreglo ::= expresion 
            {
              Object RESULT =null;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = (LinkedList<String>) listexp;
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // siguiente ::= siguiente COMA expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Funciones.Instruccion.agregarTexto(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // siguiente ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Funciones.Instruccion.agregarTexto(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= VAR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION ID END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable string", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION SUM PARENTESIS_A operacionsum PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION RES PARENTESIS_A operacionres PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MUL PARENTESIS_A operacionmul PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION DIV PARENTESIS_A operaciondiv PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MOD PARENTESIS_A operacionmod PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIA PARENTESIS_A CORCHETE_A operacionmedia CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIANA PARENTESIS_A CORCHETE_A operacionmediana CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MODA PARENTESIS_A CORCHETE_A operacionmoda CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION VARIANZA PARENTESIS_A CORCHETE_A operacionvarianza CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MAX PARENTESIS_A CORCHETE_A operacionmax CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MIN PARENTESIS_A CORCHETE_A operacionmin CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                Funciones.Instruccion.agregarValor(var.toString(), val.toString());
                                sim = new Simbolos(var.toString(),"Variable double", val.toString(), valright, valleft);
                                Funciones.Instruccion.agregarSimbolo(sim);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacionsum ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacionsum ::= operacionsum SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacionsum ::= operacionsum RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacionsum ::= operacionsum MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacionsum ::= operacionsum DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacionsum ::= operacionsum MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacionres ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacionres ::= operacionres RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacionres ::= operacionres SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacionres ::= operacionres MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacionres ::= operacionres DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacionres ::= operacionres MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacionmul ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacionmul ::= operacionmul MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacionmul ::= operacionmul RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacionmul ::= operacionmul SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacionmul ::= operacionmul DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacionmul ::= operacionmul MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciondiv ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciondiv ::= operaciondiv DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciondiv ::= operaciondiv MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciondiv ::= operaciondiv RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciondiv ::= operaciondiv SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciondiv ::= operaciondiv MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacionmod ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacionmod ::= operacionmod MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacionmod ::= operacionmod DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionmod ::= operacionmod MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacionmod ::= operacionmod RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionmod ::= operacionmod SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionmedia ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacionmedia ::= operacionmedia MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacionmediana ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacionmediana ::= operacionmediana MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionmoda ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacionmoda ::= operacionmoda MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacionvarianza ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacionvarianza ::= operacionvarianza VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacionmax ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacionmax ::= operacionmax MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacionmin ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacionmin ::= operacionmin MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arreglos ::= ARR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
        sim = new Simbolos(var.toString(),"Arreglo double", lista.toString(), listaright, listaleft);
        Funciones.Instruccion.agregarSimbolo(sim);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arreglos ::= ARR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
        sim = new Simbolos(var.toString(),"Arreglo string", lista.toString(), listaright, listaleft);
        Funciones.Instruccion.agregarSimbolo(sim);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaelemen ::= listaelemen COMA expresion 
            {
              Object RESULT =null;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        LinkedList<String> lista = (LinkedList<String>) listexp;
        lista.add(exp1.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaelemen ::= expresion 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        LinkedList<String> lista = new LinkedList<>();
        lista.add(exp2.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // graficas ::= GRAPHBAR PARENTESIS_A grafica_barras EXEC GRAPHBAR END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.recorrerParametrosGrafica(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // graficas ::= GRAPHBAR PARENTESIS_A grafica_barras GRAPHBAR END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaBarras();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // graficas ::= GRAPHBAR PARENTESIS_A grafica_barras PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaBarras(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // graficas ::= GRAPHPIE PARENTESIS_A grafica_pie EXEC GRAPHPIE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.recorrerParametrosGraficaPie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // graficas ::= GRAPHPIE PARENTESIS_A grafica_pie GRAPHPIE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaPie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // graficas ::= GRAPHPIE PARENTESIS_A grafica_pie PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaPie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // graficas ::= GRAPHLINE PARENTESIS_A grafica_line EXEC GRAPHLINE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.recorrerParametrosGraficaLinea(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // graficas ::= GRAPHLINE PARENTESIS_A grafica_line GRAPHLINE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaLinea(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // graficas ::= GRAPHLINE PARENTESIS_A grafica_line PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaLinea(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // graficas ::= HISTOGRAM PARENTESIS_A grafica_histogram EXEC HISTOGRAM END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.recorrerParametrosGraficaHistogram(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // graficas ::= HISTOGRAM PARENTESIS_A grafica_histogram HISTOGRAM END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaHistogram(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // graficas ::= HISTOGRAM PARENTESIS_A grafica_histogram PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaHistogram(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // grafica_barras ::= grafica_barras repeticion_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // grafica_barras ::= repeticion_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // grafica_pie ::= grafica_pie repeticion_parametros_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // grafica_pie ::= repeticion_parametros_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // grafica_line ::= grafica_line repeticion_parametros_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_line",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // grafica_line ::= repeticion_parametros_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_line",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // grafica_histogram ::= grafica_histogram repeticion_parametros_histogram 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_histogram",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // grafica_histogram ::= repeticion_parametros_histogram 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_histogram",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // repeticion_parametros ::= TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("titulo", exp1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // repeticion_parametros ::= EJEX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValor("ejeX", (LinkedList<String>) lista1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // repeticion_parametros ::= EJEX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("ejeX", (LinkedList<String>) lista11); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // repeticion_parametros ::= EJEY DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValor("ejeY", (LinkedList<String>) lista2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // repeticion_parametros ::= EJEY DOBLEDOSPUNTOS DOUBLE IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista22left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista22right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista22 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("ejeY", (LinkedList<String>) lista22); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // repeticion_parametros ::= TITULOX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("tituloX", exp2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // repeticion_parametros ::= TITULOY DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("tituloY", exp3.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // repeticion_parametros_pie ::= LABEL DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValorPie("label", (LinkedList<String>) lista1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // repeticion_parametros_pie ::= LABEL DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorPie("label", (LinkedList<String>) lista11); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // repeticion_parametros_pie ::= VALUES DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValorPie("values", (LinkedList<String>) lista2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // repeticion_parametros_pie ::= VALUES DOBLEDOSPUNTOS DOUBLE IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista22left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista22right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista22 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorPie("values", (LinkedList<String>) lista22); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // repeticion_parametros_pie ::= TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorPie("titulo", exp2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // repeticion_parametros_line ::= TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorLine("titulo", exp1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_line",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // repeticion_parametros_line ::= EJEX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValorLine("ejeX", (LinkedList<String>) lista1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_line",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // repeticion_parametros_line ::= EJEX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorLine("ejeX", (LinkedList<String>) lista11); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_line",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // repeticion_parametros_line ::= EJEY DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValorLine("ejeY", (LinkedList<String>) lista2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_line",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // repeticion_parametros_line ::= EJEY DOBLEDOSPUNTOS DOUBLE IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista22left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista22right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista22 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorLine("ejeY", (LinkedList<String>) lista22); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_line",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // repeticion_parametros_line ::= TITULOX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorLine("tituloX", exp2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_line",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // repeticion_parametros_line ::= TITULOY DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorLine("tituloY", exp3.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_line",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // repeticion_parametros_histogram ::= TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorHistogram("titulo", exp1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_histogram",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // repeticion_parametros_histogram ::= VALUES DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValorHistogram("values", (LinkedList<String>) lista2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_histogram",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // repeticion_parametros_histogram ::= VALUES DOBLEDOSPUNTOS DOUBLE IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista22left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista22right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista22 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorHistogram("values", (LinkedList<String>) lista22); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_histogram",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= NUMERODECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                    Object resulta = Funciones.Instruccion.obtenerValor(val);
                                                                    if(resulta != null && resulta instanceof LinkedList){
                                                                        RESULT = resulta;
                                                                    } 
                                                                    else if(resulta != null && resulta instanceof String){
                                                                        RESULT = resulta.toString();
                                                                    }else{
                                                                       RESULT = val.toString(); 
                                                                    }
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= SUM PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= RES PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresion ::= MUL PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresion ::= DIV PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= MOD PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= MEDIA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion ::= MEDIANA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion ::= MODA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion ::= VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresion ::= VARIANZA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion ::= MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion ::= MAX PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresion ::= MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion ::= MIN PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
