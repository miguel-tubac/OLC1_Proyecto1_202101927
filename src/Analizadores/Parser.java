
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import InterfasGrafica.FrameInicio;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\005\004\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\003\011\000\002\003\014\000\002" +
    "\026\005\000\002\026\003\000\002\004\005\000\002\004" +
    "\003\000\002\010\014\000\002\010\016\000\002\010\017" +
    "\000\002\010\017\000\002\010\017\000\002\010\017\000" +
    "\002\010\017\000\002\010\021\000\002\010\021\000\002" +
    "\010\021\000\002\010\021\000\002\010\021\000\002\010" +
    "\021\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\020\003\000\002\020\011\000" +
    "\002\021\003\000\002\021\011\000\002\022\003\000\002" +
    "\022\011\000\002\023\003\000\002\023\011\000\002\024" +
    "\003\000\002\024\011\000\002\025\003\000\002\025\011" +
    "\000\002\011\016\000\002\011\020\000\002\012\005\000" +
    "\002\012\003\000\002\027\014\000\002\027\013\000\002" +
    "\027\010\000\002\027\014\000\002\027\013\000\002\027" +
    "\010\000\002\030\004\000\002\030\003\000\002\032\004" +
    "\000\002\032\003\000\002\031\013\000\002\031\015\000" +
    "\002\031\013\000\002\031\013\000\002\031\013\000\002" +
    "\033\015\000\002\033\013\000\002\033\013\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\006\000\002" +
    "\006\010\000\002\006\006\000\002\006\010\000\002\006" +
    "\006\000\002\006\010\000\002\006\006\000\002\006\010" +
    "\000\002\006\006\000\002\006\010\000\002\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\004\006\005\001\002\000\004\002\u01d6\001" +
    "\002\000\020\003\015\007\010\010\017\032\012\033\006" +
    "\050\007\057\021\001\002\000\004\014\u01bf\001\002\000" +
    "\004\021\u017c\001\002\000\004\002\uffff\001\002\000\020" +
    "\003\ufffd\007\ufffd\010\ufffd\032\ufffd\033\ufffd\050\ufffd\057" +
    "\ufffd\001\002\000\004\014\260\001\002\000\020\003\ufffa" +
    "\007\ufffa\010\ufffa\032\ufffa\033\ufffa\050\ufffa\057\ufffa\001" +
    "\002\000\020\003\ufffc\007\ufffc\010\ufffc\032\ufffc\033\ufffc" +
    "\050\ufffc\057\ufffc\001\002\000\004\017\257\001\002\000" +
    "\020\003\ufff9\007\ufff9\010\ufff9\032\ufff9\033\ufff9\050\ufff9" +
    "\057\ufff9\001\002\000\004\015\232\001\002\000\020\003" +
    "\ufffb\007\ufffb\010\ufffb\032\ufffb\033\ufffb\050\ufffb\057\ufffb" +
    "\001\002\000\004\021\025\001\002\000\020\003\015\007" +
    "\023\010\017\032\012\033\006\050\007\057\021\001\002" +
    "\000\004\002\000\001\002\000\020\003\ufffe\007\ufffe\010" +
    "\ufffe\032\ufffe\033\ufffe\050\ufffe\057\ufffe\001\002\000\010" +
    "\051\027\060\030\061\026\001\002\000\004\015\222\001" +
    "\002\000\004\015\212\001\002\000\004\015\054\001\002" +
    "\000\016\022\033\051\027\056\035\057\036\060\030\061" +
    "\026\001\002\000\016\022\uffad\051\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\001\002\000\004\012\052\001\002\000" +
    "\016\022\uffae\051\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\001\002\000\004\057\044\001\002\000\004\012\037\001" +
    "\002\000\004\017\040\001\002\000\004\022\041\001\002" +
    "\000\004\012\042\001\002\000\004\017\043\001\002\000" +
    "\020\003\uffb2\007\uffb2\010\uffb2\032\uffb2\033\uffb2\050\uffb2" +
    "\057\uffb2\001\002\000\004\012\045\001\002\000\004\017" +
    "\046\001\002\000\004\022\047\001\002\000\004\012\050" +
    "\001\002\000\004\017\051\001\002\000\020\003\uffb3\007" +
    "\uffb3\010\uffb3\032\uffb3\033\uffb3\050\uffb3\057\uffb3\001\002" +
    "\000\004\017\053\001\002\000\020\003\uffb1\007\uffb1\010" +
    "\uffb1\032\uffb1\033\uffb1\050\uffb1\057\uffb1\001\002\000\004" +
    "\030\055\001\002\000\004\026\056\001\002\000\004\027" +
    "\057\001\002\000\004\020\060\001\002\000\004\026\061" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\004\021\203\001" +
    "\002\000\004\021\176\001\002\000\042\012\uffa4\016\uffa4" +
    "\022\uffa4\025\uffa4\027\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\001\002\000\004\021\171\001\002\000\004\021" +
    "\164\001\002\000\004\021\155\001\002\000\042\012\uffa3" +
    "\016\uffa3\022\uffa3\025\uffa3\027\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\001\002\000\006\016\107\027\152\001" +
    "\002\000\004\021\143\001\002\000\022\016\uffb7\027\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\001" +
    "\002\000\004\021\134\001\002\000\042\012\uffa2\016\uffa2" +
    "\022\uffa2\025\uffa2\027\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\001\002\000\004\021\127\001\002\000\004\021" +
    "\122\001\002\000\004\021\113\001\002\000\004\021\102" +
    "\001\002\000\040\004\070\005\064\013\075\026\103\034" +
    "\063\035\065\036\077\037\076\040\066\041\100\042\062" +
    "\043\074\044\072\045\067\046\101\001\002\000\036\004" +
    "\070\005\064\013\075\034\063\035\065\036\077\037\076" +
    "\040\066\041\100\042\062\043\074\044\072\045\067\046" +
    "\101\001\002\000\004\022\105\001\002\000\042\012\uff91" +
    "\016\uff91\022\uff91\025\uff91\027\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\001\002\000\006\016\107\027\110\001" +
    "\002\000\036\004\070\005\064\013\075\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\004\022\111\001\002" +
    "\000\042\012\uff92\016\uff92\022\uff92\025\uff92\027\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\001\002\000\022\016" +
    "\uffb8\027\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\001\002\000\040\004\070\005\064\013\075\026" +
    "\114\034\063\035\065\036\077\037\076\040\066\041\100" +
    "\042\062\043\074\044\072\045\067\046\101\001\002\000" +
    "\036\004\070\005\064\013\075\034\063\035\065\036\077" +
    "\037\076\040\066\041\100\042\062\043\074\044\072\045" +
    "\067\046\101\001\002\000\004\022\116\001\002\000\042" +
    "\012\uff9b\016\uff9b\022\uff9b\025\uff9b\027\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\001\002\000\006\016\107\027" +
    "\120\001\002\000\004\022\121\001\002\000\042\012\uff9c" +
    "\016\uff9c\022\uff9c\025\uff9c\027\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\001\002\000\036\004\070\005\064\013" +
    "\075\034\063\035\065\036\077\037\076\040\066\041\100" +
    "\042\062\043\074\044\072\045\067\046\101\001\002\000" +
    "\004\016\124\001\002\000\036\004\070\005\064\013\075" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\004" +
    "\022\126\001\002\000\042\012\uff9f\016\uff9f\022\uff9f\025" +
    "\uff9f\027\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\001" +
    "\002\000\036\004\070\005\064\013\075\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\004\016\131\001\002" +
    "\000\036\004\070\005\064\013\075\034\063\035\065\036" +
    "\077\037\076\040\066\041\100\042\062\043\074\044\072" +
    "\045\067\046\101\001\002\000\004\022\133\001\002\000" +
    "\042\012\uff9e\016\uff9e\022\uff9e\025\uff9e\027\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\001\002\000\040\004\070" +
    "\005\064\013\075\026\135\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\036\004\070\005\064\013\075\034" +
    "\063\035\065\036\077\037\076\040\066\041\100\042\062" +
    "\043\074\044\072\045\067\046\101\001\002\000\004\022" +
    "\137\001\002\000\042\012\uff97\016\uff97\022\uff97\025\uff97" +
    "\027\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\001\002" +
    "\000\006\016\107\027\141\001\002\000\004\022\142\001" +
    "\002\000\042\012\uff98\016\uff98\022\uff98\025\uff98\027\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\001\002\000\040" +
    "\004\070\005\064\013\075\026\144\034\063\035\065\036" +
    "\077\037\076\040\066\041\100\042\062\043\074\044\072" +
    "\045\067\046\101\001\002\000\036\004\070\005\064\013" +
    "\075\034\063\035\065\036\077\037\076\040\066\041\100" +
    "\042\062\043\074\044\072\045\067\046\101\001\002\000" +
    "\004\022\146\001\002\000\042\012\uff95\016\uff95\022\uff95" +
    "\025\uff95\027\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\001\002\000\006\016\107\027\150\001\002\000\004\022" +
    "\151\001\002\000\042\012\uff96\016\uff96\022\uff96\025\uff96" +
    "\027\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\001\002" +
    "\000\004\012\153\001\002\000\004\017\154\001\002\000" +
    "\016\022\uffa7\051\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\001\002\000\040\004\070\005\064\013\075\026\156\034" +
    "\063\035\065\036\077\037\076\040\066\041\100\042\062" +
    "\043\074\044\072\045\067\046\101\001\002\000\036\004" +
    "\070\005\064\013\075\034\063\035\065\036\077\037\076" +
    "\040\066\041\100\042\062\043\074\044\072\045\067\046" +
    "\101\001\002\000\004\022\160\001\002\000\042\012\uff93" +
    "\016\uff93\022\uff93\025\uff93\027\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93" +
    "\045\uff93\046\uff93\001\002\000\006\016\107\027\162\001" +
    "\002\000\004\022\163\001\002\000\042\012\uff94\016\uff94" +
    "\022\uff94\025\uff94\027\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\001\002\000\036\004\070\005\064\013\075\034" +
    "\063\035\065\036\077\037\076\040\066\041\100\042\062" +
    "\043\074\044\072\045\067\046\101\001\002\000\004\016" +
    "\166\001\002\000\036\004\070\005\064\013\075\034\063" +
    "\035\065\036\077\037\076\040\066\041\100\042\062\043" +
    "\074\044\072\045\067\046\101\001\002\000\004\022\170" +
    "\001\002\000\042\012\uff9d\016\uff9d\022\uff9d\025\uff9d\027" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\001\002\000" +
    "\036\004\070\005\064\013\075\034\063\035\065\036\077" +
    "\037\076\040\066\041\100\042\062\043\074\044\072\045" +
    "\067\046\101\001\002\000\004\016\173\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\004\022\175\001\002\000\042\012" +
    "\uffa0\016\uffa0\022\uffa0\025\uffa0\027\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\001\002\000\036\004\070\005\064" +
    "\013\075\034\063\035\065\036\077\037\076\040\066\041" +
    "\100\042\062\043\074\044\072\045\067\046\101\001\002" +
    "\000\004\016\200\001\002\000\036\004\070\005\064\013" +
    "\075\034\063\035\065\036\077\037\076\040\066\041\100" +
    "\042\062\043\074\044\072\045\067\046\101\001\002\000" +
    "\004\022\202\001\002\000\042\012\uffa1\016\uffa1\022\uffa1" +
    "\025\uffa1\027\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\001\002\000\040\004\070\005\064\013\075\026\204\034" +
    "\063\035\065\036\077\037\076\040\066\041\100\042\062" +
    "\043\074\044\072\045\067\046\101\001\002\000\036\004" +
    "\070\005\064\013\075\034\063\035\065\036\077\037\076" +
    "\040\066\041\100\042\062\043\074\044\072\045\067\046" +
    "\101\001\002\000\004\022\206\001\002\000\042\012\uff99" +
    "\016\uff99\022\uff99\025\uff99\027\uff99\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\001\002\000\006\016\107\027\210\001" +
    "\002\000\004\022\211\001\002\000\042\012\uff9a\016\uff9a" +
    "\022\uff9a\025\uff9a\027\uff9a\034\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\001\002\000\004\030\213\001\002\000\004\026" +
    "\214\001\002\000\004\027\215\001\002\000\004\020\216" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\004\012\220\001" +
    "\002\000\004\017\221\001\002\000\016\022\uffa5\051\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000\004\031" +
    "\223\001\002\000\004\020\224\001\002\000\004\026\225" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\006\016\107\027" +
    "\227\001\002\000\004\012\230\001\002\000\004\017\231" +
    "\001\002\000\016\022\uffa6\051\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\001\002\000\006\011\234\047\233\001\002" +
    "\000\004\020\244\001\002\000\004\020\235\001\002\000" +
    "\036\004\070\005\064\013\075\034\063\035\065\036\077" +
    "\037\076\040\066\041\100\042\062\043\074\044\072\045" +
    "\067\046\101\001\002\000\006\012\241\016\240\001\002" +
    "\000\006\012\ufff2\016\ufff2\001\002\000\036\004\070\005" +
    "\064\013\075\034\063\035\065\036\077\037\076\040\066" +
    "\041\100\042\062\043\074\044\072\045\067\046\101\001" +
    "\002\000\004\017\242\001\002\000\020\003\ufff7\007\ufff7" +
    "\010\ufff7\032\ufff7\033\ufff7\050\ufff7\057\ufff7\001\002\000" +
    "\006\012\ufff3\016\ufff3\001\002\000\036\004\070\005\064" +
    "\013\075\034\063\035\065\036\077\037\076\040\066\041" +
    "\100\042\062\043\074\044\072\045\067\046\101\001\002" +
    "\000\004\025\246\001\002\000\004\024\247\001\002\000" +
    "\040\004\070\005\064\013\075\026\251\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\004\012\255\001\002" +
    "\000\036\004\070\005\064\013\075\034\063\035\065\036" +
    "\077\037\076\040\066\041\100\042\062\043\074\044\072" +
    "\045\067\046\101\001\002\000\004\012\ufff4\001\002\000" +
    "\006\016\107\027\254\001\002\000\004\012\ufff5\001\002" +
    "\000\004\017\256\001\002\000\020\003\ufff6\007\ufff6\010" +
    "\ufff6\032\ufff6\033\ufff6\050\ufff6\057\ufff6\001\002\000\020" +
    "\003\ufff8\007\ufff8\010\ufff8\032\ufff8\033\ufff8\050\ufff8\057" +
    "\ufff8\001\002\000\006\030\262\031\261\001\002\000\004" +
    "\015\274\001\002\000\004\026\263\001\002\000\004\027" +
    "\264\001\002\000\004\015\265\001\002\000\004\013\266" +
    "\001\002\000\004\023\267\001\002\000\004\025\270\001" +
    "\002\000\004\013\271\001\002\000\004\012\272\001\002" +
    "\000\004\017\273\001\002\000\020\003\ufff0\007\ufff0\010" +
    "\ufff0\032\ufff0\033\ufff0\050\ufff0\057\ufff0\001\002\000\004" +
    "\013\275\001\002\000\004\023\276\001\002\000\004\025" +
    "\277\001\002\000\036\004\070\005\064\013\075\034\301" +
    "\035\302\036\311\037\310\040\303\041\312\042\300\043" +
    "\306\044\305\045\304\046\313\001\002\000\004\021\u016e" +
    "\001\002\000\004\021\u015c\001\002\000\004\021\u014a\001" +
    "\002\000\004\021\u0138\001\002\000\004\021\u012a\001\002" +
    "\000\004\021\u011c\001\002\000\004\021\u010e\001\002\000" +
    "\004\012\u010c\001\002\000\004\021\372\001\002\000\004" +
    "\021\350\001\002\000\004\021\332\001\002\000\004\021" +
    "\314\001\002\000\040\004\070\005\064\013\075\026\315" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\006\027\321\046\320\001\002\000" +
    "\010\016\107\027\110\046\uffbc\001\002\000\004\021\325" +
    "\001\002\000\004\022\322\001\002\000\004\012\323\001" +
    "\002\000\004\017\324\001\002\000\020\003\uffe5\007\uffe5" +
    "\010\uffe5\032\uffe5\033\uffe5\050\uffe5\057\uffe5\001\002\000" +
    "\004\026\326\001\002\000\036\004\070\005\064\013\075" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\006" +
    "\016\107\027\330\001\002\000\004\022\331\001\002\000" +
    "\006\027\uffbb\046\uffbb\001\002\000\040\004\070\005\064" +
    "\013\075\026\333\034\063\035\065\036\077\037\076\040" +
    "\066\041\100\042\062\043\074\044\072\045\067\046\101" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\006\027\336\041" +
    "\337\001\002\000\010\016\107\027\120\041\uffc6\001\002" +
    "\000\004\022\345\001\002\000\004\021\340\001\002\000" +
    "\004\026\341\001\002\000\036\004\070\005\064\013\075" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\006" +
    "\016\107\027\343\001\002\000\004\022\344\001\002\000" +
    "\006\027\uffc5\041\uffc5\001\002\000\004\012\346\001\002" +
    "\000\004\017\347\001\002\000\020\003\uffea\007\uffea\010" +
    "\uffea\032\uffea\033\uffea\050\uffea\057\uffea\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\016\022\360\034\357\035\355\036" +
    "\361\037\362\040\356\001\002\000\004\016\353\001\002" +
    "\000\036\004\070\005\064\013\075\034\063\035\065\036" +
    "\077\037\076\040\066\041\100\042\062\043\074\044\072" +
    "\045\067\046\101\001\002\000\016\022\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\001\002\000\036\004\070" +
    "\005\064\013\075\034\063\035\065\036\077\037\076\040" +
    "\066\041\100\042\062\043\074\044\072\045\067\046\101" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\036\004\070\005" +
    "\064\013\075\034\063\035\065\036\077\037\076\040\066" +
    "\041\100\042\062\043\074\044\072\045\067\046\101\001" +
    "\002\000\004\012\365\001\002\000\036\004\070\005\064" +
    "\013\075\034\063\035\065\036\077\037\076\040\066\041" +
    "\100\042\062\043\074\044\072\045\067\046\101\001\002" +
    "\000\036\004\070\005\064\013\075\034\063\035\065\036" +
    "\077\037\076\040\066\041\100\042\062\043\074\044\072" +
    "\045\067\046\101\001\002\000\016\022\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002\000\016\022\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\001\002\000" +
    "\004\017\366\001\002\000\020\003\uffed\007\uffed\010\uffed" +
    "\032\uffed\033\uffed\050\uffed\057\uffed\001\002\000\016\022" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002" +
    "\000\016\022\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\001\002\000\016\022\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\001\002\000\036\004\070\005\064\013" +
    "\075\034\063\035\065\036\077\037\076\040\066\041\100" +
    "\042\062\043\074\044\072\045\067\046\101\001\002\000" +
    "\004\016\u010a\001\002\000\016\022\u0100\034\377\035\376" +
    "\036\u0101\037\u0102\040\375\001\002\000\036\004\070\005" +
    "\064\013\075\034\063\035\065\036\077\037\076\040\066" +
    "\041\100\042\062\043\074\044\072\045\067\046\101\001" +
    "\002\000\036\004\070\005\064\013\075\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\036\004\070\005\064" +
    "\013\075\034\063\035\065\036\077\037\076\040\066\041" +
    "\100\042\062\043\074\044\072\045\067\046\101\001\002" +
    "\000\004\012\u0105\001\002\000\036\004\070\005\064\013" +
    "\075\034\063\035\065\036\077\037\076\040\066\041\100" +
    "\042\062\043\074\044\072\045\067\046\101\001\002\000" +
    "\036\004\070\005\064\013\075\034\063\035\065\036\077" +
    "\037\076\040\066\041\100\042\062\043\074\044\072\045" +
    "\067\046\101\001\002\000\016\022\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\001\002\000\016\022\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\001\002\000\004" +
    "\017\u0106\001\002\000\020\003\uffec\007\uffec\010\uffec\032" +
    "\uffec\033\uffec\050\uffec\057\uffec\001\002\000\016\022\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\001\002\000" +
    "\016\022\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\001\002\000\016\022\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\001\002\000\036\004\070\005\064\013\075" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\016" +
    "\022\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\001" +
    "\002\000\004\017\u010d\001\002\000\020\003\ufff1\007\ufff1" +
    "\010\ufff1\032\ufff1\033\ufff1\050\ufff1\057\ufff1\001\002\000" +
    "\040\004\070\005\064\013\075\026\u010f\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\036\004\070\005\064" +
    "\013\075\034\063\035\065\036\077\037\076\040\066\041" +
    "\100\042\062\043\074\044\072\045\067\046\101\001\002" +
    "\000\006\027\u0113\043\u0112\001\002\000\010\016\107\027" +
    "\141\043\uffc2\001\002\000\004\021\u0117\001\002\000\004" +
    "\022\u0114\001\002\000\004\012\u0115\001\002\000\004\017" +
    "\u0116\001\002\000\020\003\uffe8\007\uffe8\010\uffe8\032\uffe8" +
    "\033\uffe8\050\uffe8\057\uffe8\001\002\000\004\026\u0118\001" +
    "\002\000\036\004\070\005\064\013\075\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\006\016\107\027\u011a" +
    "\001\002\000\004\022\u011b\001\002\000\006\027\uffc1\043" +
    "\uffc1\001\002\000\040\004\070\005\064\013\075\026\u011d" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\010\016\107\027\150\044\uffc0\001" +
    "\002\000\006\027\u0121\044\u0120\001\002\000\004\021\u0125" +
    "\001\002\000\004\022\u0122\001\002\000\004\012\u0123\001" +
    "\002\000\004\017\u0124\001\002\000\020\003\uffe7\007\uffe7" +
    "\010\uffe7\032\uffe7\033\uffe7\050\uffe7\057\uffe7\001\002\000" +
    "\004\026\u0126\001\002\000\036\004\070\005\064\013\075" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\006" +
    "\016\107\027\u0128\001\002\000\004\022\u0129\001\002\000" +
    "\006\027\uffbf\044\uffbf\001\002\000\040\004\070\005\064" +
    "\013\075\026\u012b\034\063\035\065\036\077\037\076\040" +
    "\066\041\100\042\062\043\074\044\072\045\067\046\101" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\010\016\107\027" +
    "\162\045\uffbe\001\002\000\006\027\u012f\045\u012e\001\002" +
    "\000\004\021\u0133\001\002\000\004\022\u0130\001\002\000" +
    "\004\012\u0131\001\002\000\004\017\u0132\001\002\000\020" +
    "\003\uffe6\007\uffe6\010\uffe6\032\uffe6\033\uffe6\050\uffe6\057" +
    "\uffe6\001\002\000\004\026\u0134\001\002\000\036\004\070" +
    "\005\064\013\075\034\063\035\065\036\077\037\076\040" +
    "\066\041\100\042\062\043\074\044\072\045\067\046\101" +
    "\001\002\000\006\016\107\027\u0136\001\002\000\004\022" +
    "\u0137\001\002\000\006\027\uffbd\045\uffbd\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\016\022\u0140\034\u013f\035\u013e\036" +
    "\u0141\037\u0142\040\u013d\001\002\000\004\016\u013b\001\002" +
    "\000\036\004\070\005\064\013\075\034\063\035\065\036" +
    "\077\037\076\040\066\041\100\042\062\043\074\044\072" +
    "\045\067\046\101\001\002\000\016\022\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\001\002\000\036\004\070" +
    "\005\064\013\075\034\063\035\065\036\077\037\076\040" +
    "\066\041\100\042\062\043\074\044\072\045\067\046\101" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\036\004\070\005" +
    "\064\013\075\034\063\035\065\036\077\037\076\040\066" +
    "\041\100\042\062\043\074\044\072\045\067\046\101\001" +
    "\002\000\004\012\u0145\001\002\000\036\004\070\005\064" +
    "\013\075\034\063\035\065\036\077\037\076\040\066\041" +
    "\100\042\062\043\074\044\072\045\067\046\101\001\002" +
    "\000\036\004\070\005\064\013\075\034\063\035\065\036" +
    "\077\037\076\040\066\041\100\042\062\043\074\044\072" +
    "\045\067\046\101\001\002\000\016\022\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\001\002\000\016\022\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002\000" +
    "\004\017\u0146\001\002\000\020\003\uffeb\007\uffeb\010\uffeb" +
    "\032\uffeb\033\uffeb\050\uffeb\057\uffeb\001\002\000\016\022" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\001\002" +
    "\000\016\022\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\001\002\000\016\022\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\001\002\000\036\004\070\005\064\013" +
    "\075\034\063\035\065\036\077\037\076\040\066\041\100" +
    "\042\062\043\074\044\072\045\067\046\101\001\002\000" +
    "\016\022\u0152\034\u0151\035\u014f\036\u0153\037\u0154\040\u0150" +
    "\001\002\000\004\016\u014d\001\002\000\036\004\070\005" +
    "\064\013\075\034\063\035\065\036\077\037\076\040\066" +
    "\041\100\042\062\043\074\044\072\045\067\046\101\001" +
    "\002\000\016\022\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\001\002\000\036\004\070\005\064\013\075\034" +
    "\063\035\065\036\077\037\076\040\066\041\100\042\062" +
    "\043\074\044\072\045\067\046\101\001\002\000\036\004" +
    "\070\005\064\013\075\034\063\035\065\036\077\037\076" +
    "\040\066\041\100\042\062\043\074\044\072\045\067\046" +
    "\101\001\002\000\036\004\070\005\064\013\075\034\063" +
    "\035\065\036\077\037\076\040\066\041\100\042\062\043" +
    "\074\044\072\045\067\046\101\001\002\000\004\012\u0157" +
    "\001\002\000\036\004\070\005\064\013\075\034\063\035" +
    "\065\036\077\037\076\040\066\041\100\042\062\043\074" +
    "\044\072\045\067\046\101\001\002\000\036\004\070\005" +
    "\064\013\075\034\063\035\065\036\077\037\076\040\066" +
    "\041\100\042\062\043\074\044\072\045\067\046\101\001" +
    "\002\000\016\022\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\001\002\000\016\022\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\001\002\000\004\017\u0158\001\002" +
    "\000\020\003\uffee\007\uffee\010\uffee\032\uffee\033\uffee\050" +
    "\uffee\057\uffee\001\002\000\016\022\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\001\002\000\016\022\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002\000\016" +
    "\022\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001" +
    "\002\000\036\004\070\005\064\013\075\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\016\022\u0164\034\u0163" +
    "\035\u0161\036\u0165\037\u0166\040\u0162\001\002\000\004\016" +
    "\u015f\001\002\000\036\004\070\005\064\013\075\034\063" +
    "\035\065\036\077\037\076\040\066\041\100\042\062\043" +
    "\074\044\072\045\067\046\101\001\002\000\016\022\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002\000" +
    "\036\004\070\005\064\013\075\034\063\035\065\036\077" +
    "\037\076\040\066\041\100\042\062\043\074\044\072\045" +
    "\067\046\101\001\002\000\036\004\070\005\064\013\075" +
    "\034\063\035\065\036\077\037\076\040\066\041\100\042" +
    "\062\043\074\044\072\045\067\046\101\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\004\012\u0169\001\002\000\036\004" +
    "\070\005\064\013\075\034\063\035\065\036\077\037\076" +
    "\040\066\041\100\042\062\043\074\044\072\045\067\046" +
    "\101\001\002\000\036\004\070\005\064\013\075\034\063" +
    "\035\065\036\077\037\076\040\066\041\100\042\062\043" +
    "\074\044\072\045\067\046\101\001\002\000\016\022\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000" +
    "\016\022\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\001\002\000\004\017\u016a\001\002\000\020\003\uffef\007" +
    "\uffef\010\uffef\032\uffef\033\uffef\050\uffef\057\uffef\001\002" +
    "\000\016\022\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\001\002\000\016\022\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\001\002\000\016\022\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\040\004\070" +
    "\005\064\013\075\026\u016f\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\036\004\070\005\064\013\075\034" +
    "\063\035\065\036\077\037\076\040\066\041\100\042\062" +
    "\043\074\044\072\045\067\046\101\001\002\000\010\016" +
    "\107\027\210\042\uffc4\001\002\000\006\027\u0173\042\u0172" +
    "\001\002\000\004\021\u0177\001\002\000\004\022\u0174\001" +
    "\002\000\004\012\u0175\001\002\000\004\017\u0176\001\002" +
    "\000\020\003\uffe9\007\uffe9\010\uffe9\032\uffe9\033\uffe9\050" +
    "\uffe9\057\uffe9\001\002\000\004\026\u0178\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\006\016\107\027\u017a\001\002\000" +
    "\004\022\u017b\001\002\000\006\027\uffc3\042\uffc3\001\002" +
    "\000\014\051\u017e\052\u0183\053\u0182\054\u0181\055\u0180\001" +
    "\002\000\022\022\u01b1\050\u01ae\051\u017e\052\u0183\053\u0182" +
    "\054\u0181\055\u0180\056\u01af\001\002\000\004\015\u01a6\001" +
    "\002\000\022\022\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\001\002\000\004\015\u019e\001" +
    "\002\000\004\015\u0196\001\002\000\004\015\u018e\001\002" +
    "\000\004\015\u0184\001\002\000\004\030\u0185\001\002\000" +
    "\004\026\u0186\001\002\000\004\027\u0187\001\002\000\004" +
    "\020\u0188\001\002\000\004\026\u0189\001\002\000\036\004" +
    "\070\005\064\013\075\034\063\035\065\036\077\037\076" +
    "\040\066\041\100\042\062\043\074\044\072\045\067\046" +
    "\101\001\002\000\006\016\107\027\u018b\001\002\000\004" +
    "\012\u018c\001\002\000\004\017\u018d\001\002\000\022\022" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\001\002\000\004\031\u018f\001\002\000\004\020" +
    "\u0190\001\002\000\004\026\u0191\001\002\000\036\004\070" +
    "\005\064\013\075\034\063\035\065\036\077\037\076\040" +
    "\066\041\100\042\062\043\074\044\072\045\067\046\101" +
    "\001\002\000\006\016\107\027\u0193\001\002\000\004\012" +
    "\u0194\001\002\000\004\017\u0195\001\002\000\022\022\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\001\002\000\004\030\u0197\001\002\000\004\026\u0198" +
    "\001\002\000\004\027\u0199\001\002\000\004\020\u019a\001" +
    "\002\000\036\004\070\005\064\013\075\034\063\035\065" +
    "\036\077\037\076\040\066\041\100\042\062\043\074\044" +
    "\072\045\067\046\101\001\002\000\004\012\u019c\001\002" +
    "\000\004\017\u019d\001\002\000\022\022\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\001\002" +
    "\000\004\030\u019f\001\002\000\004\026\u01a0\001\002\000" +
    "\004\027\u01a1\001\002\000\004\020\u01a2\001\002\000\036" +
    "\004\070\005\064\013\075\034\063\035\065\036\077\037" +
    "\076\040\066\041\100\042\062\043\074\044\072\045\067" +
    "\046\101\001\002\000\004\012\u01a4\001\002\000\004\017" +
    "\u01a5\001\002\000\022\022\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000\004\030" +
    "\u01a7\001\002\000\004\026\u01a8\001\002\000\004\027\u01a9" +
    "\001\002\000\004\020\u01aa\001\002\000\036\004\070\005" +
    "\064\013\075\034\063\035\065\036\077\037\076\040\066" +
    "\041\100\042\062\043\074\044\072\045\067\046\101\001" +
    "\002\000\004\012\u01ac\001\002\000\004\017\u01ad\001\002" +
    "\000\022\022\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\001\002\000\004\012\u01ba\001\002" +
    "\000\004\050\u01b4\001\002\000\022\022\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002" +
    "\000\004\012\u01b2\001\002\000\004\017\u01b3\001\002\000" +
    "\020\003\uffb4\007\uffb4\010\uffb4\032\uffb4\033\uffb4\050\uffb4" +
    "\057\uffb4\001\002\000\004\012\u01b5\001\002\000\004\017" +
    "\u01b6\001\002\000\004\022\u01b7\001\002\000\004\012\u01b8" +
    "\001\002\000\004\017\u01b9\001\002\000\020\003\uffb6\007" +
    "\uffb6\010\uffb6\032\uffb6\033\uffb6\050\uffb6\057\uffb6\001\002" +
    "\000\004\017\u01bb\001\002\000\004\022\u01bc\001\002\000" +
    "\004\012\u01bd\001\002\000\004\017\u01be\001\002\000\020" +
    "\003\uffb5\007\uffb5\010\uffb5\032\uffb5\033\uffb5\050\uffb5\057" +
    "\uffb5\001\002\000\006\030\u01c1\031\u01c0\001\002\000\004" +
    "\015\u01cd\001\002\000\004\026\u01c2\001\002\000\004\027" +
    "\u01c3\001\002\000\004\015\u01c4\001\002\000\004\013\u01c5" +
    "\001\002\000\004\023\u01c6\001\002\000\004\025\u01c7\001" +
    "\002\000\004\026\u01c8\001\002\000\036\004\070\005\064" +
    "\013\075\034\063\035\065\036\077\037\076\040\066\041" +
    "\100\042\062\043\074\044\072\045\067\046\101\001\002" +
    "\000\006\016\107\027\u01ca\001\002\000\004\012\u01cb\001" +
    "\002\000\004\017\u01cc\001\002\000\020\003\uffb9\007\uffb9" +
    "\010\uffb9\032\uffb9\033\uffb9\050\uffb9\057\uffb9\001\002\000" +
    "\004\013\u01ce\001\002\000\004\023\u01cf\001\002\000\004" +
    "\025\u01d0\001\002\000\004\026\u01d1\001\002\000\036\004" +
    "\070\005\064\013\075\034\063\035\065\036\077\037\076" +
    "\040\066\041\100\042\062\043\074\044\072\045\067\046" +
    "\101\001\002\000\006\016\107\027\u01d3\001\002\000\004" +
    "\012\u01d4\001\002\000\004\017\u01d5\001\002\000\020\003" +
    "\uffba\007\uffba\010\uffba\032\uffba\033\uffba\050\uffba\057\uffba" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\013\005\021\007\010\010\017\011\012\027\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\013\007\023\010\017\011\012\027\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\030\033\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\072\012" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\103\001\001\000\006\006\072\012" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\114\001\001" +
    "\000\006\006\072\012\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\122\001\001\000\002\001\001\000" +
    "\004\006\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\127\001\001\000\002\001\001\000\004\006" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\135\001\001\000\006\006\072\012\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\144\001\001\000" +
    "\006\006\072\012\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\156\001\001\000\006\006\072\012\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\164\001" +
    "\001\000\002\001\001\000\004\006\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\171\001\001\000" +
    "\002\001\001\000\004\006\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\176\001\001\000\002\001" +
    "\001\000\004\006\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\204\001\001\000\006\006\072\012" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\072\012\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\235\006\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\251\026\247\001\001\000\002\001\001\000\006\006\072" +
    "\012\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\103\001\001\000\010\006\072\012\316\025\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\072\012" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\114\001\001\000\010\006\072\012" +
    "\334\020\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\072\012\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\351\015\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\353\001" +
    "\001\000\002\001\001\000\004\006\370\001\001\000\004" +
    "\006\367\001\001\000\004\006\366\001\001\000\002\001" +
    "\001\000\004\006\363\001\001\000\004\006\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\372\016\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0108\001\001\000\004" +
    "\006\u0107\001\001\000\004\006\u0106\001\001\000\002\001" +
    "\001\000\004\006\u0103\001\001\000\004\006\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\135\001\001" +
    "\000\010\006\072\012\u0110\022\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\072\012\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\144\001\001\000\010\006\072\012\u011d\023\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\072\012\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\156\001\001\000\010\006\072\012\u012b\024" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\072" +
    "\012\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0139\017\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u013b\001\001\000" +
    "\002\001\001\000\004\006\u0148\001\001\000\004\006\u0147" +
    "\001\001\000\004\006\u0146\001\001\000\002\001\001\000" +
    "\004\006\u0143\001\001\000\004\006\u0142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u014b\014\u014a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u014d\001\001\000\002\001\001" +
    "\000\004\006\u015a\001\001\000\004\006\u0159\001\001\000" +
    "\004\006\u0158\001\001\000\002\001\001\000\004\006\u0155" +
    "\001\001\000\004\006\u0154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u015d\013\u015c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u015f\001\001\000\002\001\001\000\004\006" +
    "\u016c\001\001\000\004\006\u016b\001\001\000\004\006\u016a" +
    "\001\001\000\002\001\001\000\004\006\u0167\001\001\000" +
    "\004\006\u0166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\204\001\001" +
    "\000\010\006\072\012\u016f\021\u0170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\072\012\u0178\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\u017c\031\u017e\001\001\000\004\031\u01af\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\072\012\u0189\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\072\012\u0191\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u019a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u01a2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u01aa\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\072" +
    "\012\u01c8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\072\012\u01d1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Funciones.Instruccion.agregarError("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado"+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Funciones.Instruccion.agregarError("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion."+"\n");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM lista_instrucciones END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= PROGRAM END_PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= imprimir_consola 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= graficas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS PRINT IGUAL siguiente END PUNTOYCOMA 
            {
              Object RESULT =null;
		 Funciones.Instruccion.agregarTexto("\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_consola",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS COLUMN IGUAL expresion GUION MAYOR imprimir_arreglo END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
            Funciones.Expresion.mostrarLista(var.toString() , (LinkedList<String>) lista);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_consola",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // imprimir_arreglo ::= CORCHETE_A listaelemen CORCHETE_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // imprimir_arreglo ::= expresion 
            {
              Object RESULT =null;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = (LinkedList<String>) listexp;
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // siguiente ::= siguiente COMA expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Funciones.Instruccion.agregarTexto(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // siguiente ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Funciones.Instruccion.agregarTexto(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siguiente",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= VAR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION ID END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION SUM PARENTESIS_A operacionsum PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION RES PARENTESIS_A operacionres PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MUL PARENTESIS_A operacionmul PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION DIV PARENTESIS_A operaciondiv PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MOD PARENTESIS_A operacionmod PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIA PARENTESIS_A CORCHETE_A operacionmedia CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MEDIANA PARENTESIS_A CORCHETE_A operacionmediana CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MODA PARENTESIS_A CORCHETE_A operacionmoda CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION VARIANZA PARENTESIS_A CORCHETE_A operacionvarianza CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MAX PARENTESIS_A CORCHETE_A operacionmax CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION MIN PARENTESIS_A CORCHETE_A operacionmin CORCHETE_C PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Funciones.Instruccion.agregarValor(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacionsum ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacionsum ::= operacionsum SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacionsum ::= operacionsum RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacionsum ::= operacionsum MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacionsum ::= operacionsum DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacionsum ::= operacionsum MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionsum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacionres ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacionres ::= operacionres RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacionres ::= operacionres SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacionres ::= operacionres MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacionres ::= operacionres DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacionres ::= operacionres MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionres",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacionmul ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacionmul ::= operacionmul MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacionmul ::= operacionmul RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacionmul ::= operacionmul SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacionmul ::= operacionmul DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacionmul ::= operacionmul MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmul",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciondiv ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciondiv ::= operaciondiv DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciondiv ::= operaciondiv MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciondiv ::= operaciondiv RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciondiv ::= operaciondiv SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciondiv ::= operaciondiv MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciondiv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacionmod ::= expresion COMA expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacionmod ::= operacionmod MOD expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacionmod ::= operacionmod DIV expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionmod ::= operacionmod MUL expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacionmod ::= operacionmod RES expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionmod ::= operacionmod SUM expresion 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionmedia ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacionmedia ::= operacionmedia MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmedia",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacionmediana ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacionmediana ::= operacionmediana MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmediana",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionmoda ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacionmoda ::= operacionmoda MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmoda",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacionvarianza ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacionvarianza ::= operacionvarianza VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionvarianza",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacionmax ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacionmax ::= operacionmax MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmax",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacionmin ::= listaelemen 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacionmin ::= operacionmin MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionmin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arreglos ::= ARR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arreglos ::= ARR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID MENOR GUION CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaelemen ::= listaelemen COMA expresion 
            {
              Object RESULT =null;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        LinkedList<String> lista = (LinkedList<String>) listexp;
        lista.add(exp1.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaelemen ::= expresion 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        LinkedList<String> lista = new LinkedList<>();
        lista.add(exp2.toString());
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelemen",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // graficas ::= GRAPHBAR PARENTESIS_A grafica_barras EXEC GRAPHBAR END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.recorrerParametrosGrafica(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // graficas ::= GRAPHBAR PARENTESIS_A grafica_barras GRAPHBAR END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaBarras();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // graficas ::= GRAPHBAR PARENTESIS_A grafica_barras PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaBarras(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // graficas ::= GRAPHPIE PARENTESIS_A grafica_pie EXEC GRAPHPIE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.recorrerParametrosGraficaPie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // graficas ::= GRAPHPIE PARENTESIS_A grafica_pie GRAPHPIE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaPie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // graficas ::= GRAPHPIE PARENTESIS_A grafica_pie PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		 FrameInicio.reiniciarGraficaPie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // grafica_barras ::= grafica_barras repeticion_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // grafica_barras ::= repeticion_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // grafica_pie ::= grafica_pie repeticion_parametros_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // grafica_pie ::= repeticion_parametros_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // repeticion_parametros ::= TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("titulo", exp1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // repeticion_parametros ::= EJEX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValor("ejeX", (LinkedList<String>) lista1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // repeticion_parametros ::= EJEY DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValor("ejeY", (LinkedList<String>) lista2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // repeticion_parametros ::= TITULOX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("tituloX", exp2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // repeticion_parametros ::= TITULOY DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValor("tituloY", exp3.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // repeticion_parametros_pie ::= LABEL DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValorPie("label", (LinkedList<String>) lista1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // repeticion_parametros_pie ::= VALUES DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen CORCHETE_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 FrameInicio.agregarValorPie("values", (LinkedList<String>) lista2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // repeticion_parametros_pie ::= TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FrameInicio.agregarValorPie("titulo", exp2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeticion_parametros_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= NUMERODECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                    Object resulta = Funciones.Instruccion.obtenerValor(val);
                                                                    if(resulta != null && resulta instanceof LinkedList){
                                                                        RESULT = resulta;
                                                                    } 
                                                                    else if(resulta != null && resulta instanceof String){
                                                                        RESULT = resulta.toString();
                                                                    }else{
                                                                       RESULT = val.toString(); 
                                                                    }
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= SUM PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= RES PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= MUL PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= DIV PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= MOD PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= MEDIA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= MEDIA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= MEDIANA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= MEDIANA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= MODA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= MODA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= VARIANZA PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= VARIANZA PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= MAX PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= MAX PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= MIN PARENTESIS_A CORCHETE_A listaelemen CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= MIN PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
