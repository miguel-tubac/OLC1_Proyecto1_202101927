// ------------  Paquete e importaciones ------------
package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import InterfasGrafica.FrameInicio;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Funciones.Instruccion.agregarError("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado"+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Funciones.Instruccion.agregarError("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion."+"\n");
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String ENTERO;
terminal String NUMERODECIMAL;
terminal String PROGRAM, END_PROGRAM;
terminal String CONSOLE, PRINT, END;
terminal String ID;
terminal String DOSPUNTOS, DOBLEDOSPUNTOS;
terminal String COMA, PUNTOYCOMA, IGUAL;
terminal String PARENTESIS_A, PARENTESIS_C;
terminal String MENOR, MAYOR, GUION;
terminal String CORCHETE_A, CORCHETE_C;
terminal String CHAR, DOUBLE, VAR, ARR;
terminal String SUM, RES, MUL, DIV, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal String COLUMN;
terminal String GRAPHBAR, TITULO, EJEX, EJEY, TITULOX, TITULOY, EXEC;
terminal String GRAPHPIE, LABEL, VALUES;




//------> Declaración de no terminales
non terminal inicio;
non terminal imprimir_consola, siguiente;
non terminal lista_instrucciones;
non terminal expresion;
non terminal instruccion;
non terminal variables;
non terminal arreglos, listaelemen;
non terminal operacionsum, operacionres, operacionmul, operaciondiv, operacionmod;
non terminal operacionmedia, operacionmediana, operacionmoda, operacionvarianza, operacionmax, operacionmin;
non terminal imprimir_arreglo;
non terminal graficas, grafica_barras, repeticion_parametros;
non terminal grafica_pie, repeticion_parametros_pie;

//------> PRECEDENCIA
precedence left COMA, PARENTESIS_A, CORCHETE_A, CORCHETE_C, PARENTESIS_C;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= PROGRAM lista_instrucciones END_PROGRAM
    | PROGRAM END_PROGRAM
;


lista_instrucciones ::=   lista_instrucciones instruccion
    | instruccion
;

instruccion ::= imprimir_consola 
    | variables
    | arreglos
    | graficas
    | error PUNTOYCOMA
;

imprimir_consola ::= CONSOLE DOBLEDOSPUNTOS PRINT IGUAL siguiente END PUNTOYCOMA 
                            {: Funciones.Instruccion.agregarTexto("\n");:}
    | CONSOLE DOBLEDOSPUNTOS COLUMN IGUAL expresion:var GUION MAYOR imprimir_arreglo:lista END PUNTOYCOMA
        {:
            Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
            Funciones.Expresion.mostrarLista(var.toString() , (LinkedList<String>) lista);
        :}
;

imprimir_arreglo ::= CORCHETE_A listaelemen:lista CORCHETE_C        {: RESULT = lista; :}
    | expresion:listexp     
            {: 
                LinkedList<String> lista = (LinkedList<String>) listexp;
                RESULT = lista;
            :}
;

siguiente ::= siguiente COMA expresion:val       
                            {: Funciones.Instruccion.agregarTexto(val.toString()); :}
    | expresion:val         {: Funciones.Instruccion.agregarTexto(val.toString()); :}
;

variables ::= VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION expresion:val END PUNTOYCOMA 
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID:var MENOR GUION ID:val END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    //Calculos aritmeticos
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION SUM PARENTESIS_A operacionsum:val PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION RES PARENTESIS_A operacionres:val PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION MUL PARENTESIS_A operacionmul:val PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION DIV PARENTESIS_A operaciondiv:val PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION MOD PARENTESIS_A operacionmod:val PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    //Calculos estadisticos
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION MEDIA PARENTESIS_A CORCHETE_A operacionmedia:val CORCHETE_C PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION MEDIANA PARENTESIS_A CORCHETE_A operacionmediana:val CORCHETE_C PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION MODA PARENTESIS_A CORCHETE_A operacionmoda:val CORCHETE_C PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}  
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION VARIANZA PARENTESIS_A CORCHETE_A operacionvarianza:val CORCHETE_C PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}    
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION MAX PARENTESIS_A CORCHETE_A operacionmax:val CORCHETE_C PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}  
    | VAR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION MIN PARENTESIS_A CORCHETE_A operacionmin:val CORCHETE_C PARENTESIS_C END PUNTOYCOMA
                            {: Funciones.Instruccion.agregarValor(var.toString(), val.toString()); :}       
;

operacionsum ::= expresion:val1 COMA expresion:val2    {: RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); :}
    | operacionsum SUM expresion:val2    {: RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); :}
    | operacionsum RES expresion:val2    {: RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); :}
    | operacionsum MUL expresion:val2    {: RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); :}
    | operacionsum DIV expresion:val2    {: RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); :}
    | operacionsum MOD expresion:val2    {: RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); :}
;

operacionres ::= expresion:val1 COMA expresion:val2    {: RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); :}
    | operacionres RES expresion:val2    {: RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); :}
    | operacionres SUM expresion:val2    {: RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); :}
    | operacionres MUL expresion:val2    {: RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); :}
    | operacionres DIV expresion:val2    {: RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); :}
    | operacionres MOD expresion:val2    {: RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); :}
;

operacionmul ::= expresion:val1 COMA expresion:val2    {: RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); :}
    | operacionmul MUL expresion:val2    {: RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); :}
    | operacionmul RES expresion:val2    {: RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); :}
    | operacionmul SUM expresion:val2    {: RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); :}
    | operacionmul DIV expresion:val2    {: RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); :}
    | operacionmul MOD expresion:val2    {: RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); :}    
;

operaciondiv ::= expresion:val1 COMA expresion:val2    {: RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); :}
    | operaciondiv DIV expresion:val2    {: RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); :}
    | operaciondiv MUL expresion:val2    {: RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); :}
    | operaciondiv RES expresion:val2    {: RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); :}
    | operaciondiv SUM expresion:val2    {: RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); :}
    | operaciondiv MOD expresion:val2    {: RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); :}   
;

operacionmod ::= expresion:val1 COMA expresion:val2    {: RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); :}
    | operacionmod MOD expresion:val2    {: RESULT = Funciones.Expresion.modulo(RESULT.toString(), val2.toString()); :}
    | operacionmod DIV expresion:val2    {: RESULT = Funciones.Expresion.divicion(RESULT.toString(), val2.toString()); :}
    | operacionmod MUL expresion:val2    {: RESULT = Funciones.Expresion.multiplicacion(RESULT.toString(), val2.toString()); :}
    | operacionmod RES expresion:val2    {: RESULT = Funciones.Expresion.resta(RESULT.toString(), val2.toString()); :}
    | operacionmod SUM expresion:val2    {: RESULT = Funciones.Expresion.suma(RESULT.toString(), val2.toString()); :}
;

operacionmedia ::= listaelemen:lista    {: RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); :}
    | operacionmedia MEDIA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C   {: RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); :}
;

operacionmediana ::= listaelemen:lista    {: RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); :}
    | operacionmediana MEDIANA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C   {: RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); :}
;

operacionmoda ::= listaelemen:lista    {: RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); :}
    | operacionmoda MODA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C   {: RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); :}
;

operacionvarianza ::= listaelemen:lista    {: RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); :}
    | operacionvarianza VARIANZA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C   {: RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); :}
;

operacionmax ::= listaelemen:lista    {: RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); :}
    | operacionmax MAX PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C   {: RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); :}
;

operacionmin ::= listaelemen:lista    {: RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); :}
    | operacionmin MIN PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C   {: RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); :}
;

arreglos ::= ARR DOSPUNTOS DOUBLE DOBLEDOSPUNTOS ID:var MENOR GUION CORCHETE_A listaelemen:lista CORCHETE_C END PUNTOYCOMA
    {:
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
    :}

    | ARR DOSPUNTOS CHAR CORCHETE_A CORCHETE_C DOBLEDOSPUNTOS ID:var MENOR GUION CORCHETE_A listaelemen:lista CORCHETE_C END PUNTOYCOMA
    {: 
        Funciones.Instruccion.agregarValor(var.toString(), (LinkedList<String>) lista);
    :}
;

listaelemen ::= listaelemen:listexp COMA expresion:exp1       
    {: 
        LinkedList<String> lista = (LinkedList<String>) listexp;
        lista.add(exp1.toString());
        RESULT = lista;
    :}

    | expresion:exp2    
    {:  
        LinkedList<String> lista = new LinkedList<>();
        lista.add(exp2.toString());
        RESULT = lista;
    :}
;

graficas ::= GRAPHBAR PARENTESIS_A grafica_barras EXEC GRAPHBAR END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA
        {: FrameInicio.recorrerParametrosGrafica(); :}
    | GRAPHBAR PARENTESIS_A grafica_barras GRAPHBAR END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA
        {: FrameInicio.reiniciarGraficaBarras();  :}
    | GRAPHBAR PARENTESIS_A grafica_barras PARENTESIS_C END PUNTOYCOMA
        {: FrameInicio.reiniciarGraficaBarras(); :}
    | GRAPHPIE PARENTESIS_A grafica_pie EXEC GRAPHPIE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA
        {: FrameInicio.recorrerParametrosGraficaPie(); :}
    | GRAPHPIE PARENTESIS_A grafica_pie GRAPHPIE END PUNTOYCOMA PARENTESIS_C END PUNTOYCOMA
        {: FrameInicio.reiniciarGraficaPie(); :}
    | GRAPHPIE PARENTESIS_A grafica_pie PARENTESIS_C END PUNTOYCOMA
        {: FrameInicio.reiniciarGraficaPie(); :}
;

grafica_barras ::= grafica_barras repeticion_parametros
    | repeticion_parametros
;

grafica_pie ::= grafica_pie repeticion_parametros_pie
    | repeticion_parametros_pie
;

repeticion_parametros ::= TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion:exp1 END PUNTOYCOMA
        {: FrameInicio.agregarValor("titulo", exp1.toString()); :}
    | EJEX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaelemen:lista1 CORCHETE_C END PUNTOYCOMA
        {: FrameInicio.agregarValor("ejeX", (LinkedList<String>) lista1); :}
    | EJEY DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen:lista2 CORCHETE_C END PUNTOYCOMA
        {: FrameInicio.agregarValor("ejeY", (LinkedList<String>) lista2); :}
    | TITULOX DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion:exp2 END PUNTOYCOMA
        {: FrameInicio.agregarValor("tituloX", exp2.toString()); :}
    | TITULOY DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion:exp3 END PUNTOYCOMA
        {: FrameInicio.agregarValor("tituloY", exp3.toString()); :}
;


repeticion_parametros_pie ::= LABEL DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL  CORCHETE_A listaelemen:lista1 CORCHETE_C END PUNTOYCOMA
        {: FrameInicio.agregarValorPie("label", (LinkedList<String>) lista1); :}
    | VALUES DOBLEDOSPUNTOS DOUBLE IGUAL CORCHETE_A listaelemen:lista2 CORCHETE_C END PUNTOYCOMA
        {: FrameInicio.agregarValorPie("values", (LinkedList<String>) lista2); :}
    | TITULO DOBLEDOSPUNTOS CHAR CORCHETE_A CORCHETE_C IGUAL expresion:exp2 END PUNTOYCOMA
        {: FrameInicio.agregarValorPie("titulo", exp2.toString()); :}
;

expresion ::= NUMERODECIMAL:val                                  {: RESULT = val.toString(); :}
    | ENTERO:val                                                 {: RESULT = val.toString(); :}
    | ID:val                                                    {: 
                                                                    Object resulta = Funciones.Instruccion.obtenerValor(val);
                                                                    if(resulta != null && resulta instanceof LinkedList){
                                                                        RESULT = resulta;
                                                                    } 
                                                                    else if(resulta != null && resulta instanceof String){
                                                                        RESULT = resulta.toString();
                                                                    }else{
                                                                       RESULT = val.toString(); 
                                                                    }
                                                                :}
    | SUM PARENTESIS_A expresion:val1 COMA expresion:val2 PARENTESIS_C              {: RESULT = Funciones.Expresion.suma(val1.toString(), val2.toString()); :}
    | RES PARENTESIS_A expresion:val1 COMA expresion:val2 PARENTESIS_C              {: RESULT = Funciones.Expresion.resta(val1.toString(), val2.toString()); :}
    | MUL PARENTESIS_A expresion:val1 COMA expresion:val2 PARENTESIS_C              {: RESULT = Funciones.Expresion.multiplicacion(val1.toString(), val2.toString()); :}
    | DIV PARENTESIS_A expresion:val1 COMA expresion:val2 PARENTESIS_C              {: RESULT = Funciones.Expresion.divicion(val1.toString(), val2.toString()); :}
    | MOD PARENTESIS_A expresion:val1 COMA expresion:val2 PARENTESIS_C              {: RESULT = Funciones.Expresion.modulo(val1.toString(), val2.toString()); :}
    | MEDIA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C       {: RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); :}
    | MEDIA PARENTESIS_A expresion:lista PARENTESIS_C                               {: RESULT = Funciones.Expresion.calcularMedia((LinkedList<String>) lista); :}
    | MEDIANA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C     {: RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); :}
    | MEDIANA PARENTESIS_A expresion:lista PARENTESIS_C                             {: RESULT = Funciones.Expresion.calcularMediana((LinkedList<String>) lista); :}
    | MODA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C        {: RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); :}
    | MODA PARENTESIS_A expresion:lista PARENTESIS_C                                {: RESULT = Funciones.Expresion.calcularModa((LinkedList<String>) lista); :}
    | VARIANZA PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C    {: RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); :}
    | VARIANZA PARENTESIS_A expresion:lista PARENTESIS_C                            {: RESULT = Funciones.Expresion.calcularVarianza((LinkedList<String>) lista); :}
    | MAX PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C         {: RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); :}
    | MAX PARENTESIS_A expresion:lista PARENTESIS_C                                 {: RESULT = Funciones.Expresion.calcularMaximo((LinkedList<String>) lista); :}
    | MIN PARENTESIS_A CORCHETE_A listaelemen:lista CORCHETE_C PARENTESIS_C         {: RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); :}
    | MIN PARENTESIS_A expresion:lista PARENTESIS_C                                 {: RESULT = Funciones.Expresion.calcularMinimo((LinkedList<String>) lista); :}
;
